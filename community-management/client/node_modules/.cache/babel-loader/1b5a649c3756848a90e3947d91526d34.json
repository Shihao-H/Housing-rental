{"ast":null,"code":"var _jsxFileName = \"/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js\";\nimport { Component } from \"react\";\nimport { GoogleApiWrapper, Map, Marker } from \"google-maps-react\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport { CardBody } from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\"; // const useStyles = makeStyles(() => ({\n//     frame:{\n//         width: \"10\",\n//         height: \"512\"\n//     }\n// }));\n\nclass Locations extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dropdown = () => {\n      this.setState({\n        collapse: !this.state.collapse\n      });\n    };\n\n    this.setKeyword = event => {\n      // event.preventDefault();\n      this.setState({\n        keyword: 'restaurant',\n        lat: 40.33,\n        lng: -100.33\n      });\n      console.log('setKeyword: ');\n      console.log(this.state.keyword);\n      console.log(this.state.lat);\n      console.log(this.state.lng);\n      console.log('kkkkkk');\n    };\n\n    this.setMapProps = (mapProps, map) => {\n      this.setState({\n        mapProps: mapProps,\n        map: map\n      });\n    };\n\n    this.testProps = () => {\n      console.log('enter');\n      console.log(this.tRef.current.props); // const {google} = this.tRef.current.props;\n      //\n      //\n      // const bounds = new google.maps.LatLngBounds();\n      // const infoWindow = new google.maps.InfoWindow;\n      // let currentInfoWindow = infoWindow;\n      // const service = new google.maps.places.PlacesService(this.tRef.current.map);\n      // // let infoPane = document.getElementById('panel');\n      //\n      // let request = {\n      //     location: {\n      //         lat: 40.33, lng: -74.57\n      //     },\n      //     rankBy: this.props.google.maps.places.RankBy.DISTANCE,\n      //\n      //     // keyword: isNull ? 'hotel':this.state.keyword\n      //     // keyword: this.state.keyword\n      //     keyword: 'hotel'\n      // };\n      // console.log('&&&&&&&&&&&');\n      // console.log(service);\n      // console.log('&&&&&&&&&&&');\n    };\n\n    this.state = {\n      keyword: '',\n      mapProps: '',\n      map: '',\n      lat: 40.33,\n      lng: -74.57,\n      collapse: true\n    };\n    this.tRef = React.createRef(); // const classes = useStyles();\n\n    console.log(11111);\n  }\n\n  // componentWillMount() {\n  //     this.setState({\n  //         keyword: 'hotel',\n  //     });\n  //     console.log(22222);\n  // }\n  //\n  componentDidMount() {\n    console.log('cm====================');\n    console.log(this.tRef.current.props);\n    console.log(this.tRef.current.map);\n    console.log('cm====================');\n  } //\n  // componentDidUpdate(prevProps, prevState) {\n  //     if (prevProps.state !== this.state) {\n  //         this.render();\n  //         console.log(44444);\n  //     }\n  //\n  // }\n  // state = {\n  //     showingInfoWindow: false,\n  //     activeMarker: {},\n  //     selectedPlace: {},\n  // };\n  //\n  // onMarkerClick = (props, marker, e) =>\n  //     this.setState({\n  //         selectedPlace: props,\n  //         activeMarker: marker,\n  //         showingInfoWindow: true\n  //     });\n  //\n  // onMapClicked = (props) => {\n  //     if (this.state.showingInfoWindow) {\n  //         this.setState({\n  //             showingInfoWindow: false,\n  //             activeMarker: null\n  //         })\n  //     }\n  // };\n\n\n  fetchPlaces(mapProps, map, value) {\n    console.log('fetchPlaces start print'); //\n\n    console.log(mapProps);\n    console.log(map); //\n\n    console.log('fetchPlaces end print');\n    const {\n      google\n    } = mapProps;\n    const bounds = new google.maps.LatLngBounds();\n    const infoWindow = new google.maps.InfoWindow();\n    let currentInfoWindow = infoWindow;\n    const service = new google.maps.places.PlacesService(map);\n    let infoPane = document.getElementById('panel');\n    let isNull = false; // try {\n    //     console.log(this.state.keyword);\n    //     console.log('try')\n    // }\n    // catch(err) {\n    //\n    //     isNull = true;\n    //     console.log('still null');\n    // }\n\n    let request = {\n      location: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      rankBy: google.maps.places.RankBy.DISTANCE,\n      // keyword: isNull ? 'hotel':this.state.keyword\n      // keyword: this.state.keyword\n      keyword: 'hotel'\n    };\n    console.log('...........');\n    console.log(service);\n    console.log('...........'); // service.nearbySearch(request, this.nearbyCallback);\n\n    service.nearbySearch(request, function (results, status) {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        console.log(status);\n        results.forEach(place => {\n          let marker = new google.maps.Marker({\n            position: place.geometry.location,\n            map: map,\n            title: place.name\n          }); //     /* TODO: Step 4B: Add click listeners to the markers */\n          // Add click listener to each marker\n\n          google.maps.event.addListener(marker, 'click', () => {\n            let request = {\n              placeId: place.place_id,\n              fields: ['name', 'formatted_address', 'geometry', 'rating', 'website', 'photos']\n            };\n            /* Only fetch the details of a place when the user clicks on a marker.\n             * If we fetch the details for all place results as soon as we get\n             * the search response, we will hit API rate limits. */\n\n            service.getDetails(request, (placeResult, status) => {\n              if (status == google.maps.places.PlacesServiceStatus.OK) {\n                let placeInfowindow = new google.maps.InfoWindow();\n                let rating = \"None\";\n                if (placeResult.rating) rating = placeResult.rating;\n                placeInfowindow.setContent('<div><strong>' + placeResult.name + '</strong><br>' + 'Rating: ' + rating + '</div>');\n                placeInfowindow.open(marker.map, marker);\n                currentInfoWindow.close();\n                currentInfoWindow = placeInfowindow;\n                console.log(\"reach here\"); // showPanel(placeResult);\n\n                if (infoPane.classList.contains(\"open\")) {\n                  infoPane.classList.remove(\"open\");\n                } // Clear the previous details\n\n\n                while (infoPane.lastChild) {\n                  infoPane.removeChild(infoPane.lastChild);\n                }\n                /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                // Add the primary photo, if there is one\n\n\n                if (placeResult.photos) {\n                  let firstPhoto = placeResult.photos[0];\n                  let photo = document.createElement('img');\n                  photo.classList.add('hero');\n                  photo.src = firstPhoto.getUrl();\n                  infoPane.appendChild(photo);\n                } // Add place details with text formatting\n\n\n                let name = document.createElement('h1');\n                name.classList.add('place');\n                name.textContent = placeResult.name;\n                infoPane.appendChild(name);\n\n                if (placeResult.rating) {\n                  let rating = document.createElement('p');\n                  rating.classList.add('details');\n                  rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                  infoPane.appendChild(rating);\n                }\n\n                let address = document.createElement('p');\n                address.classList.add('details');\n                address.textContent = placeResult.formatted_address;\n                infoPane.appendChild(address);\n\n                if (placeResult.website) {\n                  let websitePara = document.createElement('p');\n                  let websiteLink = document.createElement('a');\n                  let websiteUrl = document.createTextNode(placeResult.website);\n                  websiteLink.appendChild(websiteUrl);\n                  websiteLink.title = placeResult.website;\n                  websiteLink.href = placeResult.website;\n                  websitePara.appendChild(websiteLink);\n                  infoPane.appendChild(websitePara);\n                } // Open the infoPane\n\n\n                infoPane.classList.add(\"open\");\n              } else {\n                console.log('showDetails failed: ' + status);\n              } // showDetails(placeResult, marker, status)\n\n            });\n          }); // Adjust the map bounds to include the location of this marker\n\n          bounds.extend(place.geometry.location);\n        });\n        /* Once all the markers have been placed, adjust the bounds of the map to\n         * show all the markers within the visible area. */\n\n        map.fitBounds(bounds);\n      } else {\n        console.log(\"doesn't work\");\n      }\n    });\n  }\n\n  showMap() {\n    const coordinates = [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      id: \"map\",\n      ref: this.tRef,\n      style: {\n        width: \"10\",\n        height: \"512\"\n      } // style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n      // onReady={(mapProps, map) => this.setMapProps(mapProps, map)}\n      ,\n      google: this.props.google,\n      onReady: (mapProps, map) => this.fetchPlaces(mapProps, map, this.state.keyword),\n      zoom: 16,\n      initialCenter: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      visible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      name: 'Center',\n      position: {\n        lat: this.state.lat,\n        lng: this.state.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 21\n      }\n    })), this.testProps());\n  }\n\n  render() {\n    console.log(55555);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.setKeyword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 21\n      }\n    }, \"restaurant\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.dropdown,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 21\n      }\n    }, \"Map\"), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }\n    }, this.state.collapse === true ? this.showMap() : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 73\n      }\n    }))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\"\n})(Locations);\n{\n  /*<Marker position={{ lat: 40.33, lng: -74.57}} />*/\n}\n{\n  /*<Marker onClick={this.onMarkerClick}*/\n}\n{\n  /*name={'Current location'} />*/\n}\n{\n  /*<InfoWindow*/\n}\n{\n  /*marker={this.state.activeMarker}*/\n}\n{\n  /*visible={this.state.showingInfoWindow}>*/\n}\n{\n  /*<div>*/\n}\n{\n  /*<h1>{this.state.selectedPlace.name}</h1>*/\n}\n{\n  /*</div>*/\n}\n{\n  /*</InfoWindow>*/\n}","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js"],"names":["Component","GoogleApiWrapper","Map","Marker","React","Card","makeStyles","Container","CardBody","Button","Locations","constructor","props","dropdown","setState","collapse","state","setKeyword","event","keyword","lat","lng","console","log","setMapProps","mapProps","map","testProps","tRef","current","createRef","componentDidMount","fetchPlaces","value","google","bounds","maps","LatLngBounds","infoWindow","InfoWindow","currentInfoWindow","service","places","PlacesService","infoPane","document","getElementById","isNull","request","location","rankBy","RankBy","DISTANCE","nearbySearch","results","status","PlacesServiceStatus","OK","forEach","place","marker","position","geometry","title","name","addListener","placeId","place_id","fields","getDetails","placeResult","placeInfowindow","rating","setContent","open","close","classList","contains","remove","lastChild","removeChild","photos","firstPhoto","photo","createElement","add","src","getUrl","appendChild","textContent","address","formatted_address","website","websitePara","websiteLink","websiteUrl","createTextNode","href","extend","fitBounds","showMap","coordinates","width","height","render","apiKey"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport {GoogleApiWrapper, Map, Marker} from \"google-maps-react\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport {makeStyles} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport {CardBody} from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\n\n\n\n// const useStyles = makeStyles(() => ({\n//     frame:{\n//         width: \"10\",\n//         height: \"512\"\n//     }\n// }));\n\n\nclass Locations extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            keyword: '',\n            mapProps: '',\n            map: '',\n            lat: 40.33,\n            lng: -74.57,\n            collapse: true\n        };\n        this.tRef = React.createRef();\n        // const classes = useStyles();\n        console.log(11111);\n    }\n\n    dropdown = () => {\n        this.setState({collapse: !this.state.collapse})\n    }\n\n\n    // componentWillMount() {\n    //     this.setState({\n    //         keyword: 'hotel',\n    //     });\n    //     console.log(22222);\n    // }\n    //\n    componentDidMount() {\n        console.log('cm====================');\n        console.log(this.tRef.current.props);\n        console.log(this.tRef.current.map);\n        console.log('cm====================');\n    }\n    //\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.state !== this.state) {\n    //         this.render();\n    //         console.log(44444);\n    //     }\n    //\n    // }\n\n    // state = {\n    //     showingInfoWindow: false,\n    //     activeMarker: {},\n    //     selectedPlace: {},\n    // };\n    //\n    // onMarkerClick = (props, marker, e) =>\n    //     this.setState({\n    //         selectedPlace: props,\n    //         activeMarker: marker,\n    //         showingInfoWindow: true\n    //     });\n    //\n    // onMapClicked = (props) => {\n    //     if (this.state.showingInfoWindow) {\n    //         this.setState({\n    //             showingInfoWindow: false,\n    //             activeMarker: null\n    //         })\n    //     }\n    // };\n    setKeyword = (event) => {\n        // event.preventDefault();\n        this.setState({\n            keyword: 'restaurant',\n            lat: 40.33,\n            lng: -100.33\n        });\n        console.log('setKeyword: ');\n        console.log(this.state.keyword);\n        console.log(this.state.lat);\n        console.log(this.state.lng);\n        console.log('kkkkkk');\n\n    }\n\n\n    fetchPlaces(mapProps, map, value) {\n        console.log('fetchPlaces start print');\n        //\n        console.log(mapProps);\n        console.log(map);\n        //\n        console.log('fetchPlaces end print');\n\n        const {google} = mapProps;\n\n\n        const bounds = new google.maps.LatLngBounds();\n        const infoWindow = new google.maps.InfoWindow;\n        let currentInfoWindow = infoWindow;\n        const service = new google.maps.places.PlacesService(map);\n        let infoPane = document.getElementById('panel');\n        let isNull = false;\n\n        // try {\n        //     console.log(this.state.keyword);\n        //     console.log('try')\n        // }\n        // catch(err) {\n        //\n        //     isNull = true;\n        //     console.log('still null');\n        // }\n\n\n        let request = {\n            location: {\n                lat: 40.33, lng: -74.57\n            },\n            rankBy: google.maps.places.RankBy.DISTANCE,\n\n            // keyword: isNull ? 'hotel':this.state.keyword\n            // keyword: this.state.keyword\n            keyword: 'hotel'\n        };\n\n        console.log('...........');\n        console.log(service);\n        console.log('...........');\n        // service.nearbySearch(request, this.nearbyCallback);\n\n\n\n\n\n        service.nearbySearch(request, function(results, status) {\n            if (status === google.maps.places.PlacesServiceStatus.OK) {\n                console.log(status);\n                results.forEach(place => {\n                    let marker = new google.maps.Marker({\n                        position: place.geometry.location,\n                        map: map,\n                        title: place.name\n                    });\n\n\n                    //     /* TODO: Step 4B: Add click listeners to the markers */\n                    // Add click listener to each marker\n                    google.maps.event.addListener(marker, 'click', () => {\n                        let request = {\n                            placeId: place.place_id,\n                            fields: ['name', 'formatted_address', 'geometry', 'rating',\n                                'website', 'photos']\n                        };\n\n                        /* Only fetch the details of a place when the user clicks on a marker.\n                         * If we fetch the details for all place results as soon as we get\n                         * the search response, we will hit API rate limits. */\n                        service.getDetails(request, (placeResult, status) => {\n                            if (status == google.maps.places.PlacesServiceStatus.OK) {\n                                let placeInfowindow = new google.maps.InfoWindow();\n                                let rating = \"None\";\n                                if (placeResult.rating) rating = placeResult.rating;\n                                placeInfowindow.setContent('<div><strong>' + placeResult.name +\n                                    '</strong><br>' + 'Rating: ' + rating + '</div>');\n                                placeInfowindow.open(marker.map, marker);\n                                currentInfoWindow.close();\n                                currentInfoWindow = placeInfowindow;\n                                console.log(\"reach here\");\n                                // showPanel(placeResult);\n\n                                if (infoPane.classList.contains(\"open\"))\n                                {\n                                    infoPane.classList.remove(\"open\");\n                                }\n\n                                // Clear the previous details\n                                while (infoPane.lastChild) {\n                                    infoPane.removeChild(infoPane.lastChild);\n                                }\n\n                                /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                                // Add the primary photo, if there is one\n                                if (placeResult.photos) {\n                                    let firstPhoto = placeResult.photos[0];\n                                    let photo = document.createElement('img');\n                                    photo.classList.add('hero');\n                                    photo.src = firstPhoto.getUrl();\n                                    infoPane.appendChild(photo);\n                                }\n\n                                // Add place details with text formatting\n                                let name = document.createElement('h1');\n                                name.classList.add('place');\n                                name.textContent = placeResult.name;\n                                infoPane.appendChild(name);\n                                if (placeResult.rating) {\n                                    let rating = document.createElement('p');\n                                    rating.classList.add('details');\n                                    rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                                    infoPane.appendChild(rating);\n                                }\n                                let address = document.createElement('p');\n                                address.classList.add('details');\n                                address.textContent = placeResult.formatted_address;\n                                infoPane.appendChild(address);\n                                if (placeResult.website) {\n                                    let websitePara = document.createElement('p');\n                                    let websiteLink = document.createElement('a');\n                                    let websiteUrl = document.createTextNode(placeResult.website);\n                                    websiteLink.appendChild(websiteUrl);\n                                    websiteLink.title = placeResult.website;\n                                    websiteLink.href = placeResult.website;\n                                    websitePara.appendChild(websiteLink);\n                                    infoPane.appendChild(websitePara);\n                                }\n\n                                // Open the infoPane\n                                infoPane.classList.add(\"open\");\n\n\n                            } else {\n                                console.log('showDetails failed: ' + status);\n                            }\n\n\n                            // showDetails(placeResult, marker, status)\n                        });\n                    });\n\n                    // Adjust the map bounds to include the location of this marker\n                    bounds.extend(place.geometry.location);\n                });\n                /* Once all the markers have been placed, adjust the bounds of the map to\n                 * show all the markers within the visible area. */\n                map.fitBounds(bounds);\n\n\n            }\n            else {\n                console.log(\"doesn't work\");\n            }\n        });\n\n    }\n\n\n    setMapProps = (mapProps, map) => {\n        this.setState(\n            {\n                mapProps: mapProps,\n                map: map\n            })\n    }\n\n    testProps = () => {\n        console.log('enter');\n        console.log(this.tRef.current.props);\n        // const {google} = this.tRef.current.props;\n        //\n        //\n        // const bounds = new google.maps.LatLngBounds();\n        // const infoWindow = new google.maps.InfoWindow;\n        // let currentInfoWindow = infoWindow;\n        // const service = new google.maps.places.PlacesService(this.tRef.current.map);\n        // // let infoPane = document.getElementById('panel');\n        //\n        // let request = {\n        //     location: {\n        //         lat: 40.33, lng: -74.57\n        //     },\n        //     rankBy: this.props.google.maps.places.RankBy.DISTANCE,\n        //\n        //     // keyword: isNull ? 'hotel':this.state.keyword\n        //     // keyword: this.state.keyword\n        //     keyword: 'hotel'\n        // };\n\n        // console.log('&&&&&&&&&&&');\n        // console.log(service);\n        // console.log('&&&&&&&&&&&');\n\n\n    }\n\n\n\n\n\n\n    showMap() {\n        const coordinates = [];\n\n\n        return (\n            <div>\n                <Map id = \"map\"\n                     ref = {this.tRef}\n                    style={{width: \"10\", height: \"512\"}}\n                    // style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n                    // onReady={(mapProps, map) => this.setMapProps(mapProps, map)}\n                    google={this.props.google}\n                    onReady={(mapProps,map) => this.fetchPlaces(mapProps, map, this.state.keyword)}\n\n                    zoom={16}\n                    initialCenter={{\n                        lat: 40.33, lng: -74.57\n                    }}\n                    visible={true}\n                >\n                    <Marker\n                        name={'Center'}\n                        position={{lat: this.state.lat, lng: this.state.lng}}\n                    />\n                </Map>\n                {this.testProps()}\n            </div>\n        );\n    }\n\n\n\n\n\n\n    render() {\n        console.log(55555);\n        return (\n            <div>\n                <div id=\"panel\"></div>\n                {/*// Important! Always set the container height explicitly*/}\n                <Container>\n                    <button onClick={this.setKeyword}>restaurant</button>\n                    <Button onClick={this.dropdown} size='lg'>Map</Button>\n                    <Card>\n                        {this.state.collapse === true ? this.showMap(): <span></span> }\n                    </Card>\n                </Container>\n            </div>\n        );\n    }\n}\n\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n})(Locations)\n\n\n{/*<Marker position={{ lat: 40.33, lng: -74.57}} />*/}\n\n{/*<Marker onClick={this.onMarkerClick}*/}\n{/*name={'Current location'} />*/}\n\n{/*<InfoWindow*/}\n{/*marker={this.state.activeMarker}*/}\n{/*visible={this.state.showingInfoWindow}>*/}\n{/*<div>*/}\n{/*<h1>{this.state.selectedPlace.name}</h1>*/}\n{/*</div>*/}\n{/*</InfoWindow>*/}"]},"metadata":{},"sourceType":"module"}