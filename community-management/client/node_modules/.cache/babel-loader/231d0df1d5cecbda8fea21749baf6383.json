{"ast":null,"code":"var _jsxFileName = \"/Users/shihaohuang/Documents/Mercury/community-management/client/src/MapContainer.js\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { Component } from \"react\";\nimport React from \"react\";\n\nclass MapContainer extends Component {\n  constructor(_props) {\n    super(_props);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {}\n    };\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.createMarkers = () => {\n      console.log('Create markers');\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  fetchPlaces(mapProps, map) {\n    const {\n      google\n    } = mapProps;\n    const bounds = new google.maps.LatLngBounds();\n    const infoWindow = new google.maps.InfoWindow();\n    let currentInfoWindow = infoWindow;\n    const service = new google.maps.places.PlacesService(map);\n    let infoPane = document.getElementById('panel');\n    let request = {\n      location: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      rankBy: google.maps.places.RankBy.DISTANCE,\n      // keyword: 'sushi'\n      keyword: 'hotel'\n    };\n    console.log(service); // service.nearbySearch(request, this.nearbyCallback);\n\n    service.nearbySearch(request, function (results, status) {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        console.log(status);\n        results.forEach(place => {\n          let marker = new google.maps.Marker({\n            position: place.geometry.location,\n            map: map,\n            title: place.name\n          }); //     /* TODO: Step 4B: Add click listeners to the markers */\n          // Add click listener to each marker\n\n          google.maps.event.addListener(marker, 'click', () => {\n            let request = {\n              placeId: place.place_id,\n              fields: ['name', 'formatted_address', 'geometry', 'rating', 'website', 'photos']\n            };\n            /* Only fetch the details of a place when the user clicks on a marker.\n             * If we fetch the details for all place results as soon as we get\n             * the search response, we will hit API rate limits. */\n\n            service.getDetails(request, (placeResult, status) => {\n              if (status == google.maps.places.PlacesServiceStatus.OK) {\n                let placeInfowindow = new google.maps.InfoWindow();\n                let rating = \"None\";\n                if (placeResult.rating) rating = placeResult.rating;\n                placeInfowindow.setContent('<div><strong>' + placeResult.name + '</strong><br>' + 'Rating: ' + rating + '</div>');\n                placeInfowindow.open(marker.map, marker);\n                currentInfoWindow.close();\n                currentInfoWindow = placeInfowindow;\n                console.log(\"reach here\"); // showPanel(placeResult);\n\n                if (infoPane.classList.contains(\"open\")) {\n                  infoPane.classList.remove(\"open\");\n                } // Clear the previous details\n\n\n                while (infoPane.lastChild) {\n                  infoPane.removeChild(infoPane.lastChild);\n                }\n                /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                // Add the primary photo, if there is one\n\n\n                if (placeResult.photos) {\n                  let firstPhoto = placeResult.photos[0];\n                  let photo = document.createElement('img');\n                  photo.classList.add('hero');\n                  photo.src = firstPhoto.getUrl();\n                  infoPane.appendChild(photo);\n                } // Add place details with text formatting\n\n\n                let name = document.createElement('h1');\n                name.classList.add('place');\n                name.textContent = placeResult.name;\n                infoPane.appendChild(name);\n\n                if (placeResult.rating) {\n                  let rating = document.createElement('p');\n                  rating.classList.add('details');\n                  rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                  infoPane.appendChild(rating);\n                }\n\n                let address = document.createElement('p');\n                address.classList.add('details');\n                address.textContent = placeResult.formatted_address;\n                infoPane.appendChild(address);\n\n                if (placeResult.website) {\n                  let websitePara = document.createElement('p');\n                  let websiteLink = document.createElement('a');\n                  let websiteUrl = document.createTextNode(placeResult.website);\n                  websiteLink.appendChild(websiteUrl);\n                  websiteLink.title = placeResult.website;\n                  websiteLink.href = placeResult.website;\n                  websitePara.appendChild(websiteLink);\n                  infoPane.appendChild(websitePara);\n                } // Open the infoPane\n\n\n                infoPane.classList.add(\"open\");\n              } else {\n                console.log('showDetails failed: ' + status);\n              } // showDetails(placeResult, marker, status)\n\n            });\n          }); // Adjust the map bounds to include the location of this marker\n\n          bounds.extend(place.geometry.location);\n        });\n        /* Once all the markers have been placed, adjust the bounds of the map to\n         * show all the markers within the visible area. */\n\n        map.fitBounds(bounds);\n      } else {\n        console.log(\"doesn't work\");\n      }\n    });\n    console.log('fetchPlaces');\n  } // function showDetails(placeResult, marker, status) {\n  //     if (status == window.google.maps.places.PlacesServiceStatus.OK) {\n  //         let placeInfowindow = new window.google.maps.InfoWindow();\n  //         let rating = \"None\";\n  //         if (placeResult.rating) rating = placeResult.rating;\n  //         placeInfowindow.setContent('<div><strong>' + placeResult.name +\n  //             '</strong><br>' + 'Rating: ' + rating + '</div>');\n  //         placeInfowindow.open(marker.map, marker);\n  //         currentInfoWindow.close();\n  //         currentInfoWindow = placeInfowindow;\n  //         showPanel(placeResult);\n  //     } else {\n  //         console.log('showDetails failed: ' + status);\n  //     }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"body\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }), \"// Important! Always set the container height explicitly\", /*#__PURE__*/React.createElement(\"div\", {\n      className: 'text-center',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"10\",\n        height: \"512\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      style: {\n        width: \"95%\",\n        height: \"515\",\n        display: 'flex',\n        flexFlow: 'row nowrap'\n      },\n      onReady: this.fetchPlaces,\n      google: this.props.google,\n      zoom: 16,\n      initialCenter: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'Current location',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 45\n      }\n    }, this.state.selectedPlace.name)))))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/MapContainer.js"],"names":["Map","InfoWindow","Marker","GoogleApiWrapper","Component","React","MapContainer","constructor","props","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","setState","onMapClicked","createMarkers","console","log","myRef","createRef","fetchPlaces","mapProps","map","google","bounds","maps","LatLngBounds","infoWindow","currentInfoWindow","service","places","PlacesService","infoPane","document","getElementById","request","location","lat","lng","rankBy","RankBy","DISTANCE","keyword","nearbySearch","results","status","PlacesServiceStatus","OK","forEach","place","position","geometry","title","name","event","addListener","placeId","place_id","fields","getDetails","placeResult","placeInfowindow","rating","setContent","open","close","classList","contains","remove","lastChild","removeChild","photos","firstPhoto","photo","createElement","add","src","getUrl","appendChild","textContent","address","formatted_address","website","websitePara","websiteLink","websiteUrl","createTextNode","href","extend","fitBounds","render","width","height","display","flexFlow","apiKey"],"mappings":"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","sourcesContent":["import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport {Component} from \"react\";\nimport React from \"react\";\n\nclass MapContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n\n    state = {\n        showingInfoWindow: false,\n        activeMarker: {},\n        selectedPlace: {},\n    };\n\n    onMarkerClick = (props, marker, e) =>\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n\n    onMapClicked = (props) => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            })\n        }\n    };\n\n    createMarkers = () => {\n        console.log('Create markers');\n    }\n\n\n    fetchPlaces(mapProps, map) {\n        const {google} = mapProps;\n        const bounds = new google.maps.LatLngBounds();\n        const infoWindow = new google.maps.InfoWindow;\n        let currentInfoWindow = infoWindow;\n        const service = new google.maps.places.PlacesService(map);\n        let infoPane = document.getElementById('panel');\n\n\n        let request = {\n            location: {\n                lat: 40.33, lng: -74.57\n            },\n            rankBy: google.maps.places.RankBy.DISTANCE,\n            // keyword: 'sushi'\n\n            keyword: 'hotel'\n        };\n\n        console.log(service);\n        // service.nearbySearch(request, this.nearbyCallback);\n\n\n        service.nearbySearch(request, function(results, status) {\n            if (status === google.maps.places.PlacesServiceStatus.OK) {\n                console.log(status);\n                results.forEach(place => {\n                let marker = new google.maps.Marker({\n                    position: place.geometry.location,\n                    map: map,\n                    title: place.name\n                });\n\n\n            //     /* TODO: Step 4B: Add click listeners to the markers */\n                // Add click listener to each marker\n                    google.maps.event.addListener(marker, 'click', () => {\n                    let request = {\n                        placeId: place.place_id,\n                        fields: ['name', 'formatted_address', 'geometry', 'rating',\n                            'website', 'photos']\n                    };\n\n                    /* Only fetch the details of a place when the user clicks on a marker.\n                     * If we fetch the details for all place results as soon as we get\n                     * the search response, we will hit API rate limits. */\n                    service.getDetails(request, (placeResult, status) => {\n                            if (status == google.maps.places.PlacesServiceStatus.OK) {\n                                let placeInfowindow = new google.maps.InfoWindow();\n                                let rating = \"None\";\n                                if (placeResult.rating) rating = placeResult.rating;\n                                placeInfowindow.setContent('<div><strong>' + placeResult.name +\n                                    '</strong><br>' + 'Rating: ' + rating + '</div>');\n                                placeInfowindow.open(marker.map, marker);\n                                currentInfoWindow.close();\n                                currentInfoWindow = placeInfowindow;\n                                console.log(\"reach here\");\n                                // showPanel(placeResult);\n\n                                if (infoPane.classList.contains(\"open\"))\n                                {\n                                    infoPane.classList.remove(\"open\");\n                                }\n\n                                // Clear the previous details\n                                while (infoPane.lastChild) {\n                                    infoPane.removeChild(infoPane.lastChild);\n                                }\n\n                                /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                                // Add the primary photo, if there is one\n                                if (placeResult.photos) {\n                                    let firstPhoto = placeResult.photos[0];\n                                    let photo = document.createElement('img');\n                                    photo.classList.add('hero');\n                                    photo.src = firstPhoto.getUrl();\n                                    infoPane.appendChild(photo);\n                                }\n\n                                // Add place details with text formatting\n                                let name = document.createElement('h1');\n                                name.classList.add('place');\n                                name.textContent = placeResult.name;\n                                infoPane.appendChild(name);\n                                if (placeResult.rating) {\n                                    let rating = document.createElement('p');\n                                    rating.classList.add('details');\n                                    rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                                    infoPane.appendChild(rating);\n                                }\n                                let address = document.createElement('p');\n                                address.classList.add('details');\n                                address.textContent = placeResult.formatted_address;\n                                infoPane.appendChild(address);\n                                if (placeResult.website) {\n                                    let websitePara = document.createElement('p');\n                                    let websiteLink = document.createElement('a');\n                                    let websiteUrl = document.createTextNode(placeResult.website);\n                                    websiteLink.appendChild(websiteUrl);\n                                    websiteLink.title = placeResult.website;\n                                    websiteLink.href = placeResult.website;\n                                    websitePara.appendChild(websiteLink);\n                                    infoPane.appendChild(websitePara);\n                                }\n\n                                // Open the infoPane\n                                infoPane.classList.add(\"open\");\n\n\n\n\n\n\n\n\n                            } else {\n                                console.log('showDetails failed: ' + status);\n                            }\n\n\n\n\n\n\n\n                        // showDetails(placeResult, marker, status)\n                    });\n                });\n\n                // Adjust the map bounds to include the location of this marker\n                bounds.extend(place.geometry.location);\n            });\n            /* Once all the markers have been placed, adjust the bounds of the map to\n             * show all the markers within the visible area. */\n            map.fitBounds(bounds);\n\n\n            }\n            else {\n                console.log(\"doesn't work\");\n            }\n        });\n\n\n\n\n\n\n        console.log('fetchPlaces');\n    }\n\n\n    // function showDetails(placeResult, marker, status) {\n//     if (status == window.google.maps.places.PlacesServiceStatus.OK) {\n//         let placeInfowindow = new window.google.maps.InfoWindow();\n//         let rating = \"None\";\n//         if (placeResult.rating) rating = placeResult.rating;\n//         placeInfowindow.setContent('<div><strong>' + placeResult.name +\n//             '</strong><br>' + 'Rating: ' + rating + '</div>');\n//         placeInfowindow.open(marker.map, marker);\n//         currentInfoWindow.close();\n//         currentInfoWindow = placeInfowindow;\n//         showPanel(placeResult);\n//     } else {\n//         console.log('showDetails failed: ' + status);\n//     }\n// }\n\n\n\n\n    render() {\n        return (\n            <body>\n            <div id=\"panel\"></div>\n            // Important! Always set the container height explicitly\n                <div className={'text-center'}>\n                            <div style={{width: \"10\", height: \"512\"}}>\n                                <Map\n                                    style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n                                    onReady={this.fetchPlaces}\n                                    google={this.props.google} zoom={16}\n                                    initialCenter={{\n                                        lat: 40.33, lng: -74.57\n                                    }}\n                                    >\n                                    <Marker position={{ lat: 40.33, lng: -74.57}} />\n\n                                    <Marker onClick={this.onMarkerClick}\n                                            name={'Current location'} />\n\n                                    <InfoWindow\n                                        marker={this.state.activeMarker}\n                                        visible={this.state.showingInfoWindow}>\n                                        <div>\n                                            <h1>{this.state.selectedPlace.name}</h1>\n                                        </div>\n                                    </InfoWindow>\n\n                                </Map>\n\n\n                            </div>\n                </div>\n            </body>\n        );\n    }\n}\n\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}