{"ast":null,"code":"var _jsxFileName = \"/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js\";\nimport { Component } from \"react\";\nimport { GoogleApiWrapper, Map, Marker } from \"google-maps-react\";\nimport React from \"react\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport { Card, CardBody, Button, Collapse } from 'reactstrap';\nimport './Locations.scss';\nimport FormLabel from \"@material-ui/core/FormLabel/FormLabel\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\nimport RadioGroup from \"@material-ui/core/RadioGroup/RadioGroup\";\nimport Radio from \"@material-ui/core/Radio/Radio\";\n\nclass Locations extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dropdown = () => {\n      this.setState({\n        collapse: !this.state.collapse\n      });\n    };\n\n    this.setMapOnAll = map => {\n      for (let i = 0; i < this.markers.length; i++) {\n        this.markers[i].setMap(map);\n      }\n    };\n\n    this.clearMarkers = () => {\n      this.setMapOnAll(null);\n    };\n\n    this.deleteMarkers = () => {\n      this.clearMarkers();\n      this.markers = [];\n    };\n\n    this.fetchPlaces = value => {\n      // console.log(this.tRef.current);\n      const {\n        google\n      } = this.tRef.current.props;\n      let map = this.tRef.current.map;\n      const bounds = new google.maps.LatLngBounds();\n      const infoWindow = new google.maps.InfoWindow();\n      let currentInfoWindow = infoWindow;\n      const service = new google.maps.places.PlacesService(map);\n      let infoPane = document.getElementById('panel');\n      let request = {\n        location: {\n          lat: 40.33,\n          lng: -74.57\n        },\n        rankBy: this.props.google.maps.places.RankBy.DISTANCE,\n        // keyword: isNull ? 'hotel':this.state.keyword\n        // keyword: this.state.keyword\n        keyword: value\n      };\n      let temp = new Promise((resolve, reject) => {\n        console.log('This is the begining');\n        this.deleteMarkers();\n        this.results = [];\n        service.nearbySearch(request, (results, status) => {\n          if (status == google.maps.places.PlacesServiceStatus.OK) {\n            console.log(status);\n            results.forEach(place => {\n              let marker = new google.maps.Marker({\n                position: place.geometry.location,\n                map: map,\n                title: place.name\n              });\n              this.markers.push(marker);\n              this.results.push(place); // Adjust the map bounds to include the location of this marker\n\n              bounds.extend(place.geometry.location);\n            });\n            /* Once all the markers have been placed, adjust the bounds of the map to\n             * show all the markers within the visible area. */\n\n            map.fitBounds(bounds);\n            console.log('+++++++++++++++'); // this.setMarkers(markers);\n\n            console.log(this.results);\n            console.log(this.markers);\n            console.log('+++++++++++++++');\n          } else {\n            console.log(\"doesn't work\");\n          }\n        });\n        resolve('Finished');\n      });\n\n      const temp2 = () => {\n        console.log('.....................');\n        this.results.forEach((place, index) => {\n          console.log('@@@@@@@@@@@@@@');\n          let marker = this.markers[index];\n          google.maps.event.addListener(marker, 'click', () => {\n            let request = {\n              placeId: place.place_id,\n              fields: ['name', 'formatted_address', 'geometry', 'rating', 'website', 'photos']\n            };\n            /* Only fetch the details of a place when the user clicks on a marker.\n             * If we fetch the details for all place results as soon as we get\n             * the search response, we will hit API rate limits. */\n\n            service.getDetails(request, (placeResult, status) => {\n              if (status == google.maps.places.PlacesServiceStatus.OK) {\n                let placeInfowindow = new google.maps.InfoWindow();\n                let rating = \"None\";\n                if (placeResult.rating) rating = placeResult.rating;\n                placeInfowindow.setContent('<div><strong>' + placeResult.name + '</strong><br>' + 'Rating: ' + rating + '</div>');\n                placeInfowindow.open(marker.map, marker);\n                currentInfoWindow.close();\n                currentInfoWindow = placeInfowindow;\n                console.log(\"reach here\"); // showPanel(placeResult);\n\n                if (infoPane.classList.contains(\"open\")) {\n                  infoPane.classList.remove(\"open\");\n                } // Clear the previous details\n\n\n                while (infoPane.lastChild) {\n                  infoPane.removeChild(infoPane.lastChild);\n                }\n                /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                // Add the primary photo, if there is one\n\n\n                if (placeResult.photos) {\n                  let firstPhoto = placeResult.photos[0];\n                  console.log(firstPhoto);\n                  let photo = document.createElement('img');\n                  photo.classList.add('hero');\n                  photo.src = firstPhoto.getUrl();\n                  infoPane.appendChild(photo);\n                } // Add place details with text formatting\n\n\n                let name = document.createElement('h1');\n                name.classList.add('place');\n                name.textContent = placeResult.name;\n                infoPane.appendChild(name);\n\n                if (placeResult.rating) {\n                  let rating = document.createElement('p');\n                  rating.classList.add('details');\n                  rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                  infoPane.appendChild(rating);\n                }\n\n                let address = document.createElement('p');\n                address.classList.add('details');\n                address.textContent = placeResult.formatted_address;\n                infoPane.appendChild(address);\n\n                if (placeResult.website) {\n                  let websitePara = document.createElement('p');\n                  let websiteLink = document.createElement('a');\n                  let websiteUrl = document.createTextNode(placeResult.website);\n                  websiteLink.appendChild(websiteUrl);\n                  websiteLink.title = placeResult.website;\n                  websiteLink.href = placeResult.website;\n                  websitePara.appendChild(websiteLink);\n                  infoPane.appendChild(websitePara);\n                } // Open the infoPane\n\n\n                infoPane.classList.add(\"open\");\n              } else {\n                console.log('showDetails failed: ' + status);\n              } // showDetails(placeResult, marker, status)\n\n            });\n          });\n        });\n      };\n\n      temp.then(res => {\n        let myInterval = setInterval(() => {\n          if (this.results.length > 0) {\n            setTimeout(() => {\n              console.log('clear interval...');\n              clearInterval(myInterval);\n              temp2();\n            }, 105);\n          }\n        }, 100);\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        value: event.target.value\n      });\n      this.fetchPlaces(event.target.value);\n    };\n\n    console.log(11111);\n    this.state = {\n      value: ''\n    };\n    this.tRef = React.createRef();\n    this.markers = [];\n    this.results = [];\n  }\n\n  showMap() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Map // style={{width: 600, height: 400, position: 'relative'}}\n    , {\n      style: {\n        width: 600,\n        height: 600,\n        display: 'flex',\n        flexFlow: 'row nowrap'\n      },\n      ref: this.tRef,\n      google: this.props.google // onReady={(mapProps,map) => this.fetchPlaces(mapProps, map)}\n      ,\n      zoom: 16,\n      initialCenter: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      visible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      name: 'Center',\n      position: {\n        lat: this.state.lat,\n        lng: this.state.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      component: \"legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 29\n      }\n    }, \"Gender\"), /*#__PURE__*/React.createElement(RadioGroup, {\n      \"aria-label\": \"filters\",\n      name: \"gender1\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"airport\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 76\n        }\n      }),\n      label: \"Airport\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"bus station\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 80\n        }\n      }),\n      label: \"Bus Station\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"cafe\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 73\n        }\n      }),\n      label: \"Cafe\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"convenience store\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 86\n        }\n      }),\n      label: \"Convenience Store\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"department store\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 85\n        }\n      }),\n      label: \"Department Store\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"gas station\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 80\n        }\n      }),\n      label: \"Gas Station\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"gym\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 72\n        }\n      }),\n      label: \"Gym\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"hardware store\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 83\n        }\n      }),\n      label: \"Hardware Store\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"laundry\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 76\n        }\n      }),\n      label: \"Laundry\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"movie theater\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 82\n        }\n      }),\n      label: \"Movie Theater\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"park\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 73\n        }\n      }),\n      label: \"Park\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"restaurant\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 79\n        }\n      }),\n      label: \"Restaurant\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"school\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 75\n        }\n      }),\n      label: \"School\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"hotel\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 74\n        }\n      }),\n      label: \"Hotel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"supermarket\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 80\n        }\n      }),\n      label: \"Supermarket\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"transit station\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 84\n        }\n      }),\n      label: \"Transit Station\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 21\n      }\n    }, this.showMap())), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel\",\n      className: \"picture\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\"\n})(Locations);","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js"],"names":["Component","GoogleApiWrapper","Map","Marker","React","Container","Card","CardBody","Button","Collapse","FormLabel","FormControlLabel","FormControl","RadioGroup","Radio","Locations","constructor","props","dropdown","setState","collapse","state","setMapOnAll","map","i","markers","length","setMap","clearMarkers","deleteMarkers","fetchPlaces","value","google","tRef","current","bounds","maps","LatLngBounds","infoWindow","InfoWindow","currentInfoWindow","service","places","PlacesService","infoPane","document","getElementById","request","location","lat","lng","rankBy","RankBy","DISTANCE","keyword","temp","Promise","resolve","reject","console","log","results","nearbySearch","status","PlacesServiceStatus","OK","forEach","place","marker","position","geometry","title","name","push","extend","fitBounds","temp2","index","event","addListener","placeId","place_id","fields","getDetails","placeResult","placeInfowindow","rating","setContent","open","close","classList","contains","remove","lastChild","removeChild","photos","firstPhoto","photo","createElement","add","src","getUrl","appendChild","textContent","address","formatted_address","website","websitePara","websiteLink","websiteUrl","createTextNode","href","then","res","myInterval","setInterval","setTimeout","clearInterval","handleChange","target","createRef","showMap","width","height","display","flexFlow","render","apiKey"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport {GoogleApiWrapper, Map, Marker} from \"google-maps-react\";\nimport React from \"react\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport {Card, CardBody,  Button, Collapse} from 'reactstrap';\nimport './Locations.scss';\nimport FormLabel from \"@material-ui/core/FormLabel/FormLabel\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\nimport RadioGroup from \"@material-ui/core/RadioGroup/RadioGroup\";\nimport Radio from \"@material-ui/core/Radio/Radio\";\n\n\nclass Locations extends Component {\n    constructor(props) {\n        super(props);\n        console.log(11111);\n        this.state = {\n            value: '',\n        };\n        this.tRef = React.createRef();\n        this.markers = [];\n        this.results = [];\n    }\n\n\n    dropdown = () => {\n        this.setState({collapse: !this.state.collapse})\n    }\n\n\n    // componentDidMount() {\n    //     console.log('cm====================');\n    //     console.log(this.tRef.current);\n    //     console.log(this.tRef.current.props);\n    //     console.log(this.tRef.current.map);\n    //     console.log('cm====================');\n    // }\n\n\n\n\n    // fetchPlaces(mapProps, map) {\n    //     console.log('fetchPlaces start print');\n    //     //\n    //     console.log(mapProps);\n    //     console.log(map);\n    //     //\n    //     console.log('fetchPlaces end print');\n    //\n    //     const {google} = mapProps;\n    //\n    //\n    //     const bounds = new google.maps.LatLngBounds();\n    //     const infoWindow = new google.maps.InfoWindow;\n    //     let currentInfoWindow = infoWindow;\n    //     const service = new google.maps.places.PlacesService(map);\n    //     let infoPane = document.getElementById('panel');\n    //\n    // }\n\n    setMapOnAll = (map) => {\n        for (let i = 0; i < this.markers.length; i++) {\n            this.markers[i].setMap(map);\n        }\n    }\n\n    // Removes the markers from the map, but keeps them in the array.\n    clearMarkers = () => {\n        this.setMapOnAll(null);\n    }\n\n\n    // Deletes all markers in the array by removing references to them.\n    deleteMarkers = () => {\n        this.clearMarkers();\n        this.markers = [];\n    }\n\n\n\n\n    fetchPlaces = (value) => {\n\n\n        // console.log(this.tRef.current);\n        const {google} = this.tRef.current.props;\n\n        let map = this.tRef.current.map;\n\n        const bounds = new google.maps.LatLngBounds();\n        const infoWindow = new google.maps.InfoWindow;\n        let currentInfoWindow = infoWindow;\n        const service = new google.maps.places.PlacesService(map);\n        let infoPane = document.getElementById('panel');\n\n        let request = {\n            location: {\n                lat: 40.33, lng: -74.57\n            },\n            rankBy: this.props.google.maps.places.RankBy.DISTANCE,\n\n            // keyword: isNull ? 'hotel':this.state.keyword\n            // keyword: this.state.keyword\n            keyword: value\n        };\n\n\n\n           let temp = new Promise((resolve, reject) =>\n            {\n                console.log('This is the begining');\n\n                    this.deleteMarkers();\n                    this.results=[];\n                    service.nearbySearch(request, (results, status) => {\n                        if (status == google.maps.places.PlacesServiceStatus.OK) {\n\n                            console.log(status);\n                            results.forEach(place => {\n                                let marker = new google.maps.Marker({\n                                    position: place.geometry.location,\n                                    map: map,\n                                    title: place.name\n                                });\n\n                                this.markers.push(marker);\n                                this.results.push(place);\n\n\n                                // Adjust the map bounds to include the location of this marker\n                                bounds.extend(place.geometry.location);\n                            });\n\n\n                            /* Once all the markers have been placed, adjust the bounds of the map to\n                             * show all the markers within the visible area. */\n                            map.fitBounds(bounds);\n                            console.log('+++++++++++++++');\n                            // this.setMarkers(markers);\n                            console.log(this.results);\n                            console.log(this.markers);\n                            console.log('+++++++++++++++');\n\n                        }\n                        else {\n                            console.log(\"doesn't work\");\n                        }\n\n\n                    });\n\n\n                    resolve('Finished');\n            });\n\n\n\n\n\n\n        const temp2 = () => {\n\n            console.log('.....................');\n\n                this.results.forEach((place, index) => {\n\n                    console.log('@@@@@@@@@@@@@@');\n\n\n                    let marker = this.markers[index];\n                    google.maps.event.addListener(marker, 'click', () => {\n                        let request = {\n                            placeId: place.place_id,\n                            fields: ['name', 'formatted_address', 'geometry', 'rating',\n                                'website', 'photos']\n                        };\n\n                        /* Only fetch the details of a place when the user clicks on a marker.\n                         * If we fetch the details for all place results as soon as we get\n                         * the search response, we will hit API rate limits. */\n                        service.getDetails(request, (placeResult, status) => {\n                            if (status == google.maps.places.PlacesServiceStatus.OK) {\n                                let placeInfowindow = new google.maps.InfoWindow();\n                                let rating = \"None\";\n                                if (placeResult.rating) rating = placeResult.rating;\n                                placeInfowindow.setContent('<div><strong>' + placeResult.name +\n                                    '</strong><br>' + 'Rating: ' + rating + '</div>');\n                                placeInfowindow.open(marker.map, marker);\n                                currentInfoWindow.close();\n                                currentInfoWindow = placeInfowindow;\n                                console.log(\"reach here\");\n                                // showPanel(placeResult);\n\n                                if (infoPane.classList.contains(\"open\")) {\n                                    infoPane.classList.remove(\"open\");\n                                }\n\n                                // Clear the previous details\n                                while (infoPane.lastChild) {\n                                    infoPane.removeChild(infoPane.lastChild);\n                                }\n\n                                /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                                // Add the primary photo, if there is one\n                                if (placeResult.photos) {\n                                    let firstPhoto = placeResult.photos[0];\n\n                                    console.log(firstPhoto);\n\n\n                                    let photo = document.createElement('img');\n                                    photo.classList.add('hero');\n                                    photo.src = firstPhoto.getUrl();\n                                    infoPane.appendChild(photo);\n                                }\n\n                                // Add place details with text formatting\n                                let name = document.createElement('h1');\n                                name.classList.add('place');\n                                name.textContent = placeResult.name;\n                                infoPane.appendChild(name);\n\n                                if (placeResult.rating) {\n                                    let rating = document.createElement('p');\n                                    rating.classList.add('details');\n                                    rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                                    infoPane.appendChild(rating);\n                                }\n\n                                let address = document.createElement('p');\n                                address.classList.add('details');\n                                address.textContent = placeResult.formatted_address;\n                                infoPane.appendChild(address);\n                                if (placeResult.website) {\n                                    let websitePara = document.createElement('p');\n                                    let websiteLink = document.createElement('a');\n                                    let websiteUrl = document.createTextNode(placeResult.website);\n                                    websiteLink.appendChild(websiteUrl);\n                                    websiteLink.title = placeResult.website;\n                                    websiteLink.href = placeResult.website;\n                                    websitePara.appendChild(websiteLink);\n                                    infoPane.appendChild(websitePara);\n                                }\n\n                                // Open the infoPane\n                                infoPane.classList.add(\"open\");\n\n\n                            }\n                            else {\n                                console.log('showDetails failed: ' + status);\n                            }\n\n\n                            // showDetails(placeResult, marker, status)\n                        })\n                    })\n\n                });\n\n\n        }\n\n\n\n        temp.then(\n            (res) => {\n\n                let myInterval = setInterval(() => {\n                    if(this.results.length > 0)\n                    {\n\n                        setTimeout(() => {\n                            console.log('clear interval...');\n                            clearInterval(myInterval);\n                            temp2();\n                        }, 105);\n\n\n                    }\n                }, 100);\n\n            }\n        );\n\n\n    }\n\n    handleChange = (event) => {\n        this.setState({value: event.target.value});\n        this.fetchPlaces(event.target.value);\n    };\n\n\n    showMap() {\n\n        return (\n            <div>\n                <Map\n                    // style={{width: 600, height: 400, position: 'relative'}}\n                    style={{width: 600, height: 600, display:'flex', flexFlow: 'row nowrap'}}\n                    ref = {this.tRef}\n                    google={this.props.google}\n                    // onReady={(mapProps,map) => this.fetchPlaces(mapProps, map)}\n\n                    zoom={16}\n                    initialCenter={{\n                        lat: 40.33, lng: -74.57\n                    }}\n                    visible={true}\n                >\n                    <Marker\n                        name={'Center'}\n                        position={{lat: this.state.lat, lng: this.state.lng}}\n\n                    />\n                </Map>\n            </div>\n        );\n    }\n\n\n\n\n\n\n    render() {\n        return (\n            <div>\n                <div className=\"content\">\n                    <div className=\"left\">\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Gender</FormLabel>\n                            <RadioGroup aria-label=\"filters\" name=\"gender1\" value={this.state.value} onChange={this.handleChange}>\n                                <FormControlLabel value=\"airport\" control={<Radio />} label=\"Airport\" />\n                                <FormControlLabel value=\"bus station\" control={<Radio />} label=\"Bus Station\" />\n                                <FormControlLabel value=\"cafe\" control={<Radio />} label=\"Cafe\" />\n                                <FormControlLabel value=\"convenience store\" control={<Radio />} label=\"Convenience Store\" />\n                                <FormControlLabel value=\"department store\" control={<Radio />} label=\"Department Store\" />\n                                <FormControlLabel value=\"gas station\" control={<Radio />} label=\"Gas Station\" />\n                                <FormControlLabel value=\"gym\" control={<Radio />} label=\"Gym\" />\n                                <FormControlLabel value=\"hardware store\" control={<Radio />} label=\"Hardware Store\" />\n                                <FormControlLabel value=\"laundry\" control={<Radio />} label=\"Laundry\" />\n                                <FormControlLabel value=\"movie theater\" control={<Radio />} label=\"Movie Theater\" />\n                                <FormControlLabel value=\"park\" control={<Radio />} label=\"Park\" />\n                                <FormControlLabel value=\"restaurant\" control={<Radio />} label=\"Restaurant\" />\n                                <FormControlLabel value=\"school\" control={<Radio />} label=\"School\" />\n                                <FormControlLabel value=\"hotel\" control={<Radio />} label=\"Hotel\" />\n                                <FormControlLabel value=\"supermarket\" control={<Radio />} label=\"Supermarket\" />\n                                <FormControlLabel value=\"transit station\" control={<Radio />} label=\"Transit Station\" />\n                            </RadioGroup>\n                        </FormControl>\n                    </div>\n                    <div className=\"right\">\n                        {this.showMap()}\n                    </div>\n                </div>\n                <div id=\"panel\" className=\"picture\"/>\n            </div>\n        );\n    }\n}\n\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n})(Locations)\n\n"]},"metadata":{},"sourceType":"module"}