{"ast":null,"code":"// import React, { Component } from 'react';\n// import {Card, CardBody} from 'reactstrap';\n// import {GoogleApiWrapper, InfoWindow, Map, Marker} from \"google-maps-react\";\n// // import { compose, withState, withProps, withStateHandlers, lifecycle } from 'recompose';\n// // import { withScriptjs, withGoogleMap, GoogleMap, InfoWindow} from 'react-google-maps';\n//\n// let pos;\n// let map;\n// let bounds;\n// let infoWindow;\n// let currentInfoWindow;\n// let service;\n// let infoPane;\n//\n//\n//\n// // Handle the results (up to 20) of the Nearby Search\n//  function nearbyCallback(results, status) {\n//      if (status == this.props.google.maps.places.PlacesServiceStatus.OK) {\n//         createMarkers(results);\n//     }\n// }\n//\n// function initMap() {\n//     // Initialize variables\n//     bounds = new window.google.maps.LatLngBounds();\n//     infoWindow = new window.google.maps.InfoWindow;\n//     currentInfoWindow = infoWindow;\n//     /* TODO: Step 4A3: Add a generic sidebar */\n//     infoPane = document.getElementById('panel');\n//\n//     // Try HTML5 geolocation\n//     if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(position => {\n//             pos = {\n//                 lat: position.coords.latitude,\n//                 lng: position.coords.longitude\n//             };\n//             map = new window.google.maps.Map(document.getElementById('map'), {\n//                 center: pos,\n//                 zoom: 15\n//             });\n//             bounds.extend(pos);\n//\n//             infoWindow.setPosition(pos);\n//             infoWindow.setContent('Location found.');\n//             infoWindow.open(map);\n//             map.setCenter(pos);\n//\n//             // Call Places Nearby Search on user's location\n//             getNearbyPlaces(pos);\n//         }, () => {\n//             // Browser supports geolocation, but user has denied permission\n//             handleLocationError(true, infoWindow);\n//         });\n//     } else {\n//         // Browser doesn't support geolocation\n//         handleLocationError(false, infoWindow);\n//     }\n// }\n//\n// // Handle a geolocation error\n// function handleLocationError(browserHasGeolocation, infoWindow) {\n//     // Set default location to Sydney, Australia\n//     pos = { lat: -33.856, lng: 151.215 };\n//     map = new window.google.maps.Map(document.getElementById('map'), {\n//         center: pos,\n//         zoom: 15\n//     });\n//\n//     // Display an InfoWindow at the map center\n//     infoWindow.setPosition(pos);\n//     infoWindow.setContent(browserHasGeolocation ?\n//         'Geolocation permissions denied. Using default location.' :\n//         'Error: Your browser doesn\\'t support geolocation.');\n//     infoWindow.open(map);\n//     currentInfoWindow = infoWindow;\n//\n//     // Call Places Nearby Search on the default location\n//     getNearbyPlaces(pos);\n// }\n//\n//\n//\n//\n// // // Set markers at the location of each place result\n//  function createMarkers(places) {\n//\n//      console.log('Create markers');\n//     places.forEach(place => {\n//         let marker = new window.google.maps.Marker({\n//             position: place.geometry.location,\n//             map: map,\n//             title: place.name\n//         });\n//\n//         /* TODO: Step 4B: Add click listeners to the markers */\n//         // Add click listener to each marker\n//         window.google.maps.event.addListener(marker, 'click', () => {\n//             let request = {\n//                 placeId: place.place_id,\n//                 fields: ['name', 'formatted_address', 'geometry', 'rating',\n//                     'website', 'photos']\n//             };\n//\n//             /* Only fetch the details of a place when the user clicks on a marker.\n//              * If we fetch the details for all place results as soon as we get\n//              * the search response, we will hit API rate limits. */\n//             service.getDetails(request, (placeResult, status) => {\n//                 showDetails(placeResult, marker, status)\n//             });\n//         });\n//\n//         // Adjust the map bounds to include the location of this marker\n//         bounds.extend(place.geometry.location);\n//     });\n//     /* Once all the markers have been placed, adjust the bounds of the map to\n//      * show all the markers within the visible area. */\n//     map.fitBounds(bounds);\n// }\n//\n//\n// // Perform a Places Nearby Search Request\n// function getNearbyPlaces(position) {\n//     let request = {\n//         location: position,\n//         rankBy: window.google.maps.places.RankBy.DISTANCE,\n//         // keyword: 'sushi'\n//\n//         keyword: 'hotel'\n//     };\n//\n//     service = new window.google.maps.places.PlacesService(map);\n//     service.nearbySearch(request, nearbyCallback);\n//\n//\n//     console.log('Entered here');\n// }\n//\n//\n// /* TODO: Step 4C: Show place details in an info window */\n// // Builds an InfoWindow to display details above the marker\n// function showDetails(placeResult, marker, status) {\n//     if (status == window.google.maps.places.PlacesServiceStatus.OK) {\n//         let placeInfowindow = new window.google.maps.InfoWindow();\n//         let rating = \"None\";\n//         if (placeResult.rating) rating = placeResult.rating;\n//         placeInfowindow.setContent('<div><strong>' + placeResult.name +\n//             '</strong><br>' + 'Rating: ' + rating + '</div>');\n//         placeInfowindow.open(marker.map, marker);\n//         currentInfoWindow.close();\n//         currentInfoWindow = placeInfowindow;\n//         showPanel(placeResult);\n//     } else {\n//         console.log('showDetails failed: ' + status);\n//     }\n// }\n//\n//\n//\n// /* TODO: Step 4D: Load place details in a sidebar */\n// // Displays place details in a sidebar\n// function showPanel(placeResult) {\n//     // If infoPane is already open, close it\n//     if (infoPane.classList.contains(\"open\")) {\n//         infoPane.classList.remove(\"open\");\n//     }\n//\n//     // Clear the previous details\n//     while (infoPane.lastChild) {\n//         infoPane.removeChild(infoPane.lastChild);\n//     }\n//\n//     /* TODO: Step 4E: Display a Place Photo with the Place Details */\n//     // Add the primary photo, if there is one\n//     if (placeResult.photos) {\n//         let firstPhoto = placeResult.photos[0];\n//         let photo = document.createElement('img');\n//         photo.classList.add('hero');\n//         photo.src = firstPhoto.getUrl();\n//         infoPane.appendChild(photo);\n//     }\n//\n//     // Add place details with text formatting\n//     let name = document.createElement('h1');\n//     name.classList.add('place');\n//     name.textContent = placeResult.name;\n//     infoPane.appendChild(name);\n//     if (placeResult.rating) {\n//         let rating = document.createElement('p');\n//         rating.classList.add('details');\n//         rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n//         infoPane.appendChild(rating);\n//     }\n//     let address = document.createElement('p');\n//     address.classList.add('details');\n//     address.textContent = placeResult.formatted_address;\n//     infoPane.appendChild(address);\n//     if (placeResult.website) {\n//         let websitePara = document.createElement('p');\n//         let websiteLink = document.createElement('a');\n//         let websiteUrl = document.createTextNode(placeResult.website);\n//         websiteLink.appendChild(websiteUrl);\n//         websiteLink.title = placeResult.website;\n//         websiteLink.href = placeResult.website;\n//         websitePara.appendChild(websiteLink);\n//         infoPane.appendChild(websitePara);\n//     }\n//\n//     // Open the infoPane\n//     infoPane.classList.add(\"open\");\n// }\n//\n//\n// class Locations extends Component {\n//\n//\n//     render() {\n//         return (\n//\n//\n//\n//\n//             // Important! Always set the container height explicitly\n//                 <div className={'text-center'}>\n//                             <div style={{width: \"10\", height: \"512\"}}>\n//                                 <Map\n//                                     style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n//                                     google={this.props.google} zoom={16}\n//                                     initialCenter={{\n//                                         lat: 40.33, lng: -74.57\n//                                     }}\n//                                     >\n//                                     <Marker position={{ lat: 40.33, lng: -74.57}} />\n//                                 </Map>\n//                                 <p>\n//                                     {getNearbyPlaces({lat: 40.33, lng: -74.57})}\n//                                 </p>\n//\n//\n//                             </div>\n//                 </div>\n//         );\n//     }\n// }\n//\n// // export default Locations;\n//\n// export default GoogleApiWrapper({\n//     apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n// })(Locations)\n//\n// {/*<GoogleMapReact*/}\n// {/*bootstrapURLKeys={{ key: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\" }}*/}\n// {/*defaultCenter={this.props.center}*/}\n// {/*defaultZoom={this.props.zoom}*/}\n// {/*>*/}\n// {/*</GoogleMapReact>*/}","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\n// import {Card, CardBody} from 'reactstrap';\n// import {GoogleApiWrapper, InfoWindow, Map, Marker} from \"google-maps-react\";\n// // import { compose, withState, withProps, withStateHandlers, lifecycle } from 'recompose';\n// // import { withScriptjs, withGoogleMap, GoogleMap, InfoWindow} from 'react-google-maps';\n//\n// let pos;\n// let map;\n// let bounds;\n// let infoWindow;\n// let currentInfoWindow;\n// let service;\n// let infoPane;\n//\n//\n//\n// // Handle the results (up to 20) of the Nearby Search\n//  function nearbyCallback(results, status) {\n//      if (status == this.props.google.maps.places.PlacesServiceStatus.OK) {\n//         createMarkers(results);\n//     }\n// }\n//\n// function initMap() {\n//     // Initialize variables\n//     bounds = new window.google.maps.LatLngBounds();\n//     infoWindow = new window.google.maps.InfoWindow;\n//     currentInfoWindow = infoWindow;\n//     /* TODO: Step 4A3: Add a generic sidebar */\n//     infoPane = document.getElementById('panel');\n//\n//     // Try HTML5 geolocation\n//     if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(position => {\n//             pos = {\n//                 lat: position.coords.latitude,\n//                 lng: position.coords.longitude\n//             };\n//             map = new window.google.maps.Map(document.getElementById('map'), {\n//                 center: pos,\n//                 zoom: 15\n//             });\n//             bounds.extend(pos);\n//\n//             infoWindow.setPosition(pos);\n//             infoWindow.setContent('Location found.');\n//             infoWindow.open(map);\n//             map.setCenter(pos);\n//\n//             // Call Places Nearby Search on user's location\n//             getNearbyPlaces(pos);\n//         }, () => {\n//             // Browser supports geolocation, but user has denied permission\n//             handleLocationError(true, infoWindow);\n//         });\n//     } else {\n//         // Browser doesn't support geolocation\n//         handleLocationError(false, infoWindow);\n//     }\n// }\n//\n// // Handle a geolocation error\n// function handleLocationError(browserHasGeolocation, infoWindow) {\n//     // Set default location to Sydney, Australia\n//     pos = { lat: -33.856, lng: 151.215 };\n//     map = new window.google.maps.Map(document.getElementById('map'), {\n//         center: pos,\n//         zoom: 15\n//     });\n//\n//     // Display an InfoWindow at the map center\n//     infoWindow.setPosition(pos);\n//     infoWindow.setContent(browserHasGeolocation ?\n//         'Geolocation permissions denied. Using default location.' :\n//         'Error: Your browser doesn\\'t support geolocation.');\n//     infoWindow.open(map);\n//     currentInfoWindow = infoWindow;\n//\n//     // Call Places Nearby Search on the default location\n//     getNearbyPlaces(pos);\n// }\n//\n//\n//\n//\n// // // Set markers at the location of each place result\n//  function createMarkers(places) {\n//\n//      console.log('Create markers');\n//     places.forEach(place => {\n//         let marker = new window.google.maps.Marker({\n//             position: place.geometry.location,\n//             map: map,\n//             title: place.name\n//         });\n//\n//         /* TODO: Step 4B: Add click listeners to the markers */\n//         // Add click listener to each marker\n//         window.google.maps.event.addListener(marker, 'click', () => {\n//             let request = {\n//                 placeId: place.place_id,\n//                 fields: ['name', 'formatted_address', 'geometry', 'rating',\n//                     'website', 'photos']\n//             };\n//\n//             /* Only fetch the details of a place when the user clicks on a marker.\n//              * If we fetch the details for all place results as soon as we get\n//              * the search response, we will hit API rate limits. */\n//             service.getDetails(request, (placeResult, status) => {\n//                 showDetails(placeResult, marker, status)\n//             });\n//         });\n//\n//         // Adjust the map bounds to include the location of this marker\n//         bounds.extend(place.geometry.location);\n//     });\n//     /* Once all the markers have been placed, adjust the bounds of the map to\n//      * show all the markers within the visible area. */\n//     map.fitBounds(bounds);\n// }\n//\n//\n// // Perform a Places Nearby Search Request\n// function getNearbyPlaces(position) {\n//     let request = {\n//         location: position,\n//         rankBy: window.google.maps.places.RankBy.DISTANCE,\n//         // keyword: 'sushi'\n//\n//         keyword: 'hotel'\n//     };\n//\n//     service = new window.google.maps.places.PlacesService(map);\n//     service.nearbySearch(request, nearbyCallback);\n//\n//\n//     console.log('Entered here');\n// }\n//\n//\n// /* TODO: Step 4C: Show place details in an info window */\n// // Builds an InfoWindow to display details above the marker\n// function showDetails(placeResult, marker, status) {\n//     if (status == window.google.maps.places.PlacesServiceStatus.OK) {\n//         let placeInfowindow = new window.google.maps.InfoWindow();\n//         let rating = \"None\";\n//         if (placeResult.rating) rating = placeResult.rating;\n//         placeInfowindow.setContent('<div><strong>' + placeResult.name +\n//             '</strong><br>' + 'Rating: ' + rating + '</div>');\n//         placeInfowindow.open(marker.map, marker);\n//         currentInfoWindow.close();\n//         currentInfoWindow = placeInfowindow;\n//         showPanel(placeResult);\n//     } else {\n//         console.log('showDetails failed: ' + status);\n//     }\n// }\n//\n//\n//\n// /* TODO: Step 4D: Load place details in a sidebar */\n// // Displays place details in a sidebar\n// function showPanel(placeResult) {\n//     // If infoPane is already open, close it\n//     if (infoPane.classList.contains(\"open\")) {\n//         infoPane.classList.remove(\"open\");\n//     }\n//\n//     // Clear the previous details\n//     while (infoPane.lastChild) {\n//         infoPane.removeChild(infoPane.lastChild);\n//     }\n//\n//     /* TODO: Step 4E: Display a Place Photo with the Place Details */\n//     // Add the primary photo, if there is one\n//     if (placeResult.photos) {\n//         let firstPhoto = placeResult.photos[0];\n//         let photo = document.createElement('img');\n//         photo.classList.add('hero');\n//         photo.src = firstPhoto.getUrl();\n//         infoPane.appendChild(photo);\n//     }\n//\n//     // Add place details with text formatting\n//     let name = document.createElement('h1');\n//     name.classList.add('place');\n//     name.textContent = placeResult.name;\n//     infoPane.appendChild(name);\n//     if (placeResult.rating) {\n//         let rating = document.createElement('p');\n//         rating.classList.add('details');\n//         rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n//         infoPane.appendChild(rating);\n//     }\n//     let address = document.createElement('p');\n//     address.classList.add('details');\n//     address.textContent = placeResult.formatted_address;\n//     infoPane.appendChild(address);\n//     if (placeResult.website) {\n//         let websitePara = document.createElement('p');\n//         let websiteLink = document.createElement('a');\n//         let websiteUrl = document.createTextNode(placeResult.website);\n//         websiteLink.appendChild(websiteUrl);\n//         websiteLink.title = placeResult.website;\n//         websiteLink.href = placeResult.website;\n//         websitePara.appendChild(websiteLink);\n//         infoPane.appendChild(websitePara);\n//     }\n//\n//     // Open the infoPane\n//     infoPane.classList.add(\"open\");\n// }\n//\n//\n// class Locations extends Component {\n//\n//\n//     render() {\n//         return (\n//\n//\n//\n//\n//             // Important! Always set the container height explicitly\n//                 <div className={'text-center'}>\n//                             <div style={{width: \"10\", height: \"512\"}}>\n//                                 <Map\n//                                     style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n//                                     google={this.props.google} zoom={16}\n//                                     initialCenter={{\n//                                         lat: 40.33, lng: -74.57\n//                                     }}\n//                                     >\n//                                     <Marker position={{ lat: 40.33, lng: -74.57}} />\n//                                 </Map>\n//                                 <p>\n//                                     {getNearbyPlaces({lat: 40.33, lng: -74.57})}\n//                                 </p>\n//\n//\n//                             </div>\n//                 </div>\n//         );\n//     }\n// }\n//\n// // export default Locations;\n//\n// export default GoogleApiWrapper({\n//     apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n// })(Locations)\n//\n// {/*<GoogleMapReact*/}\n// {/*bootstrapURLKeys={{ key: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\" }}*/}\n// {/*defaultCenter={this.props.center}*/}\n// {/*defaultZoom={this.props.zoom}*/}\n// {/*>*/}\n// {/*</GoogleMapReact>*/}"]},"metadata":{},"sourceType":"module"}