{"ast":null,"code":"var _jsxFileName = \"/Users/shihaohuang/Documents/Mercury/community-management/client/src/user-page/PostReview.js\";\nimport React, { useState } from \"react\";\nimport Box from \"@material-ui/core/Box/Box\";\nimport Rating from \"@material-ui/lab/Rating/Rating\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar/Snackbar\";\nimport { postReviews } from \"../actions/review.action\";\nimport './PostReview.scss';\nimport FormLabel from \"@material-ui/core/FormLabel/FormLabel\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup/FormGroup\";\nimport { appConstants } from \"../constants/constant\";\n\nconst PostReview = () => {\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n  const [anonymous, setAnonymous] = useState(false);\n\n  const setComment = event => {\n    const newReview = { ...review\n    };\n    newReview.comment = event.target.value;\n    setReview(newReview);\n  };\n\n  const setStar = event => {\n    const newReview = { ...review\n    };\n    newReview.star = event.target.value;\n    setReview(newReview);\n  };\n\n  const reviewState = useSelector(appState => {\n    return {\n      user: appState.user,\n      response: appState.response,\n      msg: appState.response ? appConstants.POST_REVIEW_SUCCESS_MESSAGE : appConstants.POST_REVIEW_SUCCESS_MESSAGE\n    };\n  });\n\n  const handleChange = event => {\n    event.preventDefault();\n    setAnonymous(!anonymous);\n  };\n\n  const [review, setReview] = React.useState({\n    username: reviewState.user.username,\n    star: 3,\n    comment: '',\n    date: new Date()\n  });\n\n  const post = () => {\n    const newReview = { ...review\n    };\n\n    if (anonymous === false) {\n      newReview.username = reviewState.user.username;\n      setReview(newReview);\n    }\n\n    if (anonymous === true) {\n      newReview.username = \"unknown\";\n      setReview(newReview);\n    }\n\n    dispatch(postReviews(review, () => {\n      setOpen(true);\n    }, () => {\n      setOpen(true);\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    component: \"fieldset\",\n    mb: 3,\n    borderColor: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Rate your experience\"), /*#__PURE__*/React.createElement(Rating, {\n    name: \"simple-controlled\",\n    value: review.star,\n    onChange: setStar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"comment\",\n    label: \"comment\",\n    multiline: true,\n    fullWidth: true,\n    rows: 4,\n    value: review.comment,\n    onChange: setComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    component: \"fieldset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: anonymous,\n      onChange: handleChange,\n      name: \"anonymous\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 38\n      }\n    }),\n    label: \"Anonymous\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"Post\"), /*#__PURE__*/React.createElement(Snackbar, {\n    className: reviewState.response ? 'success' : 'failure',\n    open: open,\n    onClose: () => setOpen(false),\n    autoHideDuration: 3000,\n    message: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 30\n      }\n    }, reviewState.msg),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default PostReview;","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/user-page/PostReview.js"],"names":["React","useState","Box","Rating","Typography","TextField","useDispatch","useSelector","Button","Snackbar","postReviews","FormLabel","FormControlLabel","Checkbox","FormControl","FormGroup","appConstants","PostReview","dispatch","open","setOpen","anonymous","setAnonymous","setComment","event","newReview","review","comment","target","value","setReview","setStar","star","reviewState","appState","user","response","msg","POST_REVIEW_SUCCESS_MESSAGE","handleChange","preventDefault","username","date","Date","post"],"mappings":"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","sourcesContent":["\nimport React, {useState} from \"react\";\nimport Box from \"@material-ui/core/Box/Box\";\nimport Rating from \"@material-ui/lab/Rating/Rating\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar/Snackbar\";\nimport {postReviews} from \"../actions/review.action\";\nimport './PostReview.scss';\nimport FormLabel from \"@material-ui/core/FormLabel/FormLabel\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup/FormGroup\";\nimport {appConstants} from \"../constants/constant\";\n\n\nconst PostReview = () => {\n\n    const dispatch = useDispatch();\n\n    const [open, setOpen] = useState(false);\n\n    const [anonymous, setAnonymous] = useState(false);\n\n    const setComment = (event) => {\n        const newReview = {...review};\n        newReview.comment = event.target.value;\n        setReview(newReview);\n    };\n\n    const setStar = (event) => {\n        const newReview = {...review};\n        newReview.star = event.target.value;\n        setReview(newReview);\n    };\n\n    const reviewState = useSelector(appState => {\n        return {\n            user: appState.user,\n            response: appState.response,\n            msg: appState.response ?\n                appConstants.POST_REVIEW_SUCCESS_MESSAGE :\n                appConstants.POST_REVIEW_SUCCESS_MESSAGE\n        };\n    });\n\n    const handleChange = (event) => {\n        event.preventDefault();\n        setAnonymous(!anonymous);\n    };\n\n    const [review, setReview] = React.useState(\n        {\n            username: reviewState.user.username,\n            star: 3,\n            comment: '',\n            date: new Date()\n        }\n    )\n\n\n    const post = () => {\n        const newReview = {...review};\n        if(anonymous===false)\n        {\n            newReview.username = reviewState.user.username;\n            setReview(newReview);\n        }\n        if(anonymous===true)\n        {\n            newReview.username = \"unknown\";\n            setReview(newReview);\n        }\n        dispatch(postReviews(review,\n            () => {\n                setOpen(true);\n            },\n            () => {\n                setOpen(true);\n            },\n            ));\n    }\n\n    return(\n        <div>\n            <form>\n                <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                    <Typography component=\"legend\">Rate your experience</Typography>\n                    <Rating\n                        name=\"simple-controlled\"\n                        value={review.star}\n                        onChange={setStar}\n                    />\n                </Box>\n\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"comment\"\n                    label=\"comment\"\n                    multiline\n                    fullWidth\n                    rows={4}\n                    value={review.comment}\n                    onChange={setComment}\n                />\n                <FormControl component=\"fieldset\">\n                    <FormGroup>\n                        <FormControlLabel\n                            control={<Checkbox checked={anonymous} onChange={handleChange} name=\"anonymous\" />}\n                            label=\"Anonymous\"\n                        />\n                    </FormGroup>\n                </FormControl>\n                <br/>\n                <Button onClick = {post}>Post</Button>\n                <Snackbar\n                    className={reviewState.response ? 'success' : 'failure'}\n                    open={open}\n                    onClose={() => setOpen(false)}\n                    autoHideDuration={3000}\n                    message={<span>{reviewState.msg}</span>}\n                />\n            </form>\n        </div>\n    );\n\n}\n\n\nexport default PostReview;"]},"metadata":{},"sourceType":"module"}