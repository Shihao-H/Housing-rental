{"ast":null,"code":"import { appConstants } from \"../constants/constant\";\nexport const checkLogin = () => {\n  const checkLoginPromise = fetch('http://localhost:8089/checklogin', {\n    credentials: 'include'\n  }).then(res => res.json()).catch();\n  return {\n    type: appConstants.CHECK_LOGIN,\n    payload: checkLoginPromise\n  };\n};\nexport const login = (user, success, failure) => {\n  // we can use a library called qs   qs.stringify(user) to get a urlencoded form data\n  const userFormData = new FormData();\n  userFormData.append('username', user.username);\n  userFormData.append('password', user.password); // ES6 fetch API, async, await\n\n  const loginPromise = fetch('http://localhost:8089/login', {\n    method: 'POST',\n    body: userFormData,\n    credentials: 'include'\n  }) // .then(res => res.json())\n  .then(res => {\n    res.success ? typeof success === 'function' && success() : typeof failure === 'function' && failure();\n    return res;\n  }).catch(err => {\n    typeof failure === 'function' && failure(err);\n    return err;\n  });\n  return {\n    type: appConstants.LOGIN,\n    payload: loginPromise\n  };\n};\nexport const register = (user, success, failure) => {\n  // we can use a library called qs   qs.stringify(user) to get a urlencoded form data\n  const userFormData = new FormData();\n  userFormData.append('username', user.username);\n  userFormData.append('password', user.password);\n  const jsf = JSON.stringify(userFormData); // ES6 fetch API, async, await\n\n  const registerPromise = fetch('http://localhost:8089/users', {\n    method: 'POST',\n    body: jsf,\n    credentials: 'include'\n  }).then(res => res.json()).then(res => {\n    res.success ? typeof success === 'function' && success() : typeof failure === 'function' && failure();\n    return res;\n  }).catch(err => {\n    typeof failure === 'function' && failure(err);\n    return err;\n  });\n  return {\n    type: appConstants.REGISTER,\n    payload: registerPromise\n  };\n};","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/actions/auth.action.js"],"names":["appConstants","checkLogin","checkLoginPromise","fetch","credentials","then","res","json","catch","type","CHECK_LOGIN","payload","login","user","success","failure","userFormData","FormData","append","username","password","loginPromise","method","body","err","LOGIN","register","jsf","JSON","stringify","registerPromise","REGISTER"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,uBAA3B;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B,QAAMC,iBAAiB,GAAGC,KAAK,CAAC,kCAAD,EAAqC;AAACC,IAAAA,WAAW,EAAE;AAAd,GAArC,CAAL,CACrBC,IADqB,CAChBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADS,EAErBC,KAFqB,EAA1B;AAGA,SAAO;AACHC,IAAAA,IAAI,EAAET,YAAY,CAACU,WADhB;AAEHC,IAAAA,OAAO,EAAET;AAFN,GAAP;AAIH,CARM;AAWP,OAAO,MAAMU,KAAK,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AAC7C;AACA,QAAMC,YAAY,GAAG,IAAIC,QAAJ,EAArB;AACAD,EAAAA,YAAY,CAACE,MAAb,CAAoB,UAApB,EAAgCL,IAAI,CAACM,QAArC;AACAH,EAAAA,YAAY,CAACE,MAAb,CAAoB,UAApB,EAAgCL,IAAI,CAACO,QAArC,EAJ6C,CAK7C;;AACA,QAAMC,YAAY,GAAGlB,KAAK,CACtB,6BADsB,EAEtB;AACImB,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,IAAI,EAAEP,YAFV;AAGIZ,IAAAA,WAAW,EAAE;AAHjB,GAFsB,CAAL,CAQb;AARa,GASZC,IATY,CASPC,GAAG,IAAI;AACTA,IAAAA,GAAG,CAACQ,OAAJ,GACI,OAAOA,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAD5C,GAEI,OAAOC,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAF5C;AAGA,WAAOT,GAAP;AACH,GAdY,EAeZE,KAfY,CAeNgB,GAAG,IAAI;AACV,WAAOT,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,CAACS,GAAD,CAAxC;AACA,WAAOA,GAAP;AACH,GAlBY,CAArB;AAoBA,SAAO;AACHf,IAAAA,IAAI,EAAET,YAAY,CAACyB,KADhB;AAEHd,IAAAA,OAAO,EAAEU;AAFN,GAAP;AAIH,CA9BM;AAiCP,OAAO,MAAMK,QAAQ,GAAG,CAACb,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AAChD;AACA,QAAMC,YAAY,GAAG,IAAIC,QAAJ,EAArB;AACAD,EAAAA,YAAY,CAACE,MAAb,CAAoB,UAApB,EAAgCL,IAAI,CAACM,QAArC;AACAH,EAAAA,YAAY,CAACE,MAAb,CAAoB,UAApB,EAAgCL,IAAI,CAACO,QAArC;AACA,QAAMO,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeb,YAAf,CAAZ,CALgD,CAMhD;;AACA,QAAMc,eAAe,GAAG3B,KAAK,CACzB,6BADyB,EAEzB;AACImB,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,IAAI,EAAEI,GAFV;AAGIvB,IAAAA,WAAW,EAAE;AAHjB,GAFyB,CAAL,CAQfC,IARe,CAQVC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARG,EASfF,IATe,CASVC,GAAG,IAAI;AACTA,IAAAA,GAAG,CAACQ,OAAJ,GACI,OAAOA,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAD5C,GAEI,OAAOC,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAF5C;AAGA,WAAOT,GAAP;AACH,GAde,EAefE,KAfe,CAeTgB,GAAG,IAAI;AACV,WAAOT,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,CAACS,GAAD,CAAxC;AACA,WAAOA,GAAP;AACH,GAlBe,CAAxB;AAoBA,SAAO;AACHf,IAAAA,IAAI,EAAET,YAAY,CAAC+B,QADhB;AAEHpB,IAAAA,OAAO,EAAEmB;AAFN,GAAP;AAIH,CA/BM","sourcesContent":["import {appConstants} from \"../constants/constant\";\n\nexport const checkLogin = () => {\n    const checkLoginPromise = fetch('http://localhost:8089/checklogin', {credentials: 'include'})\n        .then(res => res.json())\n        .catch();\n    return {\n        type: appConstants.CHECK_LOGIN,\n        payload: checkLoginPromise\n    };\n};\n\n\nexport const login = (user, success, failure) => {\n    // we can use a library called qs   qs.stringify(user) to get a urlencoded form data\n    const userFormData = new FormData();\n    userFormData.append('username', user.username);\n    userFormData.append('password', user.password);\n    // ES6 fetch API, async, await\n    const loginPromise = fetch(\n        'http://localhost:8089/login',\n        {\n            method: 'POST',\n            body: userFormData,\n            credentials: 'include'\n        }\n        )\n            // .then(res => res.json())\n            .then(res => {\n                res.success ?\n                    typeof success === 'function' && success() :\n                    typeof failure === 'function' && failure();\n                return res;\n            })\n            .catch(err => {\n                typeof failure === 'function' && failure(err);\n                return err;\n            })\n    ;\n    return {\n        type: appConstants.LOGIN,\n        payload: loginPromise\n    };\n};\n\n\nexport const register = (user, success, failure) => {\n    // we can use a library called qs   qs.stringify(user) to get a urlencoded form data\n    const userFormData = new FormData();\n    userFormData.append('username', user.username);\n    userFormData.append('password', user.password);\n    const jsf = JSON.stringify(userFormData);\n    // ES6 fetch API, async, await\n    const registerPromise = fetch(\n        'http://localhost:8089/users',\n        {\n            method: 'POST',\n            body: jsf,\n            credentials: 'include'\n        }\n        )\n            .then(res => res.json())\n            .then(res => {\n                res.success ?\n                    typeof success === 'function' && success() :\n                    typeof failure === 'function' && failure();\n                return res;\n            })\n            .catch(err => {\n                typeof failure === 'function' && failure(err);\n                return err;\n            })\n    ;\n    return {\n        type: appConstants.REGISTER,\n        payload: registerPromise\n    };\n};"]},"metadata":{},"sourceType":"module"}