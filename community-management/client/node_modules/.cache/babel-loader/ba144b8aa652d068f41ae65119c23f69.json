{"ast":null,"code":"var _jsxFileName = \"/Users/shihaohuang/Documents/Mercury/community-management/client/src/MapContainer.js\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { Component } from \"react\";\nimport React from \"react\";\n\nclass MapContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {}\n    };\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.nearbyCallback = (results, status) => {\n      console.log('nearbyCallback');\n\n      if (status === this.props.google.maps.places.PlacesServiceStatus.OK) {\n        this.createMarkers(results);\n      }\n    };\n\n    this.createMarkers = places => {\n      //\n      console.log('Create markers'); // places.forEach(place => {\n      //     let marker = new window.google.maps.Marker({\n      //         position: place.geometry.location,\n      //         map: map,\n      //         title: place.name\n      //     });\n      //\n      //     /* TODO: Step 4B: Add click listeners to the markers */\n      //     // Add click listener to each marker\n      //     window.google.maps.event.addListener(marker, 'click', () => {\n      //         let request = {\n      //             placeId: place.place_id,\n      //             fields: ['name', 'formatted_address', 'geometry', 'rating',\n      //                 'website', 'photos']\n      //         };\n      //\n      //         /* Only fetch the details of a place when the user clicks on a marker.\n      //          * If we fetch the details for all place results as soon as we get\n      //          * the search response, we will hit API rate limits. */\n      //         service.getDetails(request, (placeResult, status) => {\n      //             showDetails(placeResult, marker, status)\n      //         });\n      //     });\n      //\n      //     // Adjust the map bounds to include the location of this marker\n      //     bounds.extend(place.geometry.location);\n      // });\n      // /* Once all the markers have been placed, adjust the bounds of the map to\n      //  * show all the markers within the visible area. */\n      // map.fitBounds(bounds);\n    };\n  }\n\n  fetchPlaces(mapProps, map) {\n    const {\n      google\n    } = mapProps;\n    const service = new google.maps.places.PlacesService(map);\n    let request = {\n      location: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      rankBy: google.maps.places.RankBy.DISTANCE,\n      // keyword: 'sushi'\n      keyword: 'hotel'\n    };\n    service.nearbySearch(request, this.nearbyCallback);\n    console.log('fetchPlaces');\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // Important! Always set the container height explicitly\n      React.createElement(\"div\", {\n        className: 'text-center',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: \"10\",\n          height: \"512\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Map, {\n        style: {\n          width: \"95%\",\n          height: \"515\",\n          display: 'flex',\n          flexFlow: 'row nowrap'\n        },\n        onReady: this.fetchPlaces,\n        google: this.props.google,\n        zoom: 16,\n        initialCenter: {\n          lat: 40.33,\n          lng: -74.57\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Marker, {\n        position: {\n          lat: 40.33,\n          lng: -74.57\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(Marker, {\n        onClick: this.onMarkerClick,\n        name: 'Current location',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(InfoWindow, {\n        marker: this.state.activeMarker,\n        visible: this.state.showingInfoWindow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 45\n        }\n      }, this.state.selectedPlace.name))))))\n    );\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/MapContainer.js"],"names":["Map","InfoWindow","Marker","GoogleApiWrapper","Component","React","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","e","setState","onMapClicked","nearbyCallback","results","status","console","log","google","maps","places","PlacesServiceStatus","OK","createMarkers","fetchPlaces","mapProps","map","service","PlacesService","request","location","lat","lng","rankBy","RankBy","DISTANCE","keyword","nearbySearch","render","width","height","display","flexFlow","name","apiKey"],"mappings":"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","sourcesContent":["import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport {Component} from \"react\";\nimport React from \"react\";\n\nclass MapContainer extends Component {\n    state = {\n        showingInfoWindow: false,\n        activeMarker: {},\n        selectedPlace: {},\n    };\n\n    onMarkerClick = (props, marker, e) =>\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n\n    onMapClicked = (props) => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            })\n        }\n    };\n\n    fetchPlaces(mapProps, map) {\n        const {google} = mapProps;\n        const service = new google.maps.places.PlacesService(map);\n\n        let request = {\n            location: {\n                lat: 40.33, lng: -74.57\n            },\n            rankBy: google.maps.places.RankBy.DISTANCE,\n            // keyword: 'sushi'\n\n            keyword: 'hotel'\n        };\n\n\n        service.nearbySearch(request, this.nearbyCallback);\n        console.log('fetchPlaces');\n    }\n\n\n\n\n     nearbyCallback = (results, status) => {\n         console.log('nearbyCallback');\n        if (status === this.props.google.maps.places.PlacesServiceStatus.OK) {\n            this.createMarkers(results);\n        }\n    }\n\n    createMarkers = (places) => {\n    //\n     console.log('Create markers');\n    // places.forEach(place => {\n    //     let marker = new window.google.maps.Marker({\n    //         position: place.geometry.location,\n    //         map: map,\n    //         title: place.name\n    //     });\n    //\n    //     /* TODO: Step 4B: Add click listeners to the markers */\n    //     // Add click listener to each marker\n    //     window.google.maps.event.addListener(marker, 'click', () => {\n    //         let request = {\n    //             placeId: place.place_id,\n    //             fields: ['name', 'formatted_address', 'geometry', 'rating',\n    //                 'website', 'photos']\n    //         };\n    //\n    //         /* Only fetch the details of a place when the user clicks on a marker.\n    //          * If we fetch the details for all place results as soon as we get\n    //          * the search response, we will hit API rate limits. */\n    //         service.getDetails(request, (placeResult, status) => {\n    //             showDetails(placeResult, marker, status)\n    //         });\n    //     });\n    //\n    //     // Adjust the map bounds to include the location of this marker\n    //     bounds.extend(place.geometry.location);\n    // });\n    // /* Once all the markers have been placed, adjust the bounds of the map to\n    //  * show all the markers within the visible area. */\n    // map.fitBounds(bounds);\n}\n\n\n\n    render() {\n        return (\n\n\n            // Important! Always set the container height explicitly\n                <div className={'text-center'}>\n                            <div style={{width: \"10\", height: \"512\"}}>\n                                <Map\n                                    style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n                                    onReady={this.fetchPlaces}\n                                    google={this.props.google} zoom={16}\n                                    initialCenter={{\n                                        lat: 40.33, lng: -74.57\n                                    }}\n                                    >\n                                    <Marker position={{ lat: 40.33, lng: -74.57}} />\n\n                                    <Marker onClick={this.onMarkerClick}\n                                            name={'Current location'} />\n\n                                    <InfoWindow\n                                        marker={this.state.activeMarker}\n                                        visible={this.state.showingInfoWindow}>\n                                        <div>\n                                            <h1>{this.state.selectedPlace.name}</h1>\n                                        </div>\n                                    </InfoWindow>\n\n                                </Map>\n\n\n                            </div>\n                </div>\n        );\n    }\n}\n\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}