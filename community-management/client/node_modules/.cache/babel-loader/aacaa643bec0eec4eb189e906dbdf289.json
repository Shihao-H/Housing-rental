{"ast":null,"code":"var _jsxFileName = \"/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js\";\nimport { Component } from \"react\";\nimport { GoogleApiWrapper, Map, Marker } from \"google-maps-react\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport { CardBody } from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\"; // const useStyles = makeStyles(() => ({\n//     frame:{\n//         width: \"10\",\n//         height: \"512\"\n//     }\n// }));\n\nconst setMarkers = values => {\n  this.markers = values;\n  console.log(this.markers);\n};\n\nclass Locations extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dropdown = () => {\n      this.setState({\n        collapse: !this.state.collapse\n      });\n    };\n\n    this.setMapOnAll = map => {\n      for (let i = 0; i < this.markers.length; i++) {\n        this.markers[i].setMap(map);\n      }\n    };\n\n    this.clearMarkers = () => {\n      this.setMapOnAll(null);\n    };\n\n    this.deleteMarkers = () => {\n      this.clearMarkers();\n      this.markers = [];\n    };\n\n    this.testProps = value => {\n      console.log(222222);\n      console.log('&&&&&&&&&&&');\n      console.log(this.markers);\n      console.log('&&&&&&&&&&&'); // console.log(this.tRef.current);\n\n      const {\n        google\n      } = this.tRef.current.props;\n      let map = this.tRef.current.map;\n      const bounds = new google.maps.LatLngBounds();\n      const infoWindow = new google.maps.InfoWindow();\n      let currentInfoWindow = infoWindow;\n      const service = new google.maps.places.PlacesService(map);\n      let infoPane = document.getElementById('panel');\n      let request = {\n        location: {\n          lat: 40.33,\n          lng: -74.57\n        },\n        rankBy: this.props.google.maps.places.RankBy.DISTANCE,\n        // keyword: isNull ? 'hotel':this.state.keyword\n        // keyword: this.state.keyword\n        keyword: value\n      };\n\n      const temp = () => {\n        return new Promise(function (resolve, reject) {\n          resolve(service.nearbySearch(request, (results, status) => {\n            if (status == google.maps.places.PlacesServiceStatus.OK) {\n              console.log(status);\n              results.forEach(place => {\n                let marker = new google.maps.Marker({\n                  position: place.geometry.location,\n                  map: map,\n                  title: place.name\n                });\n                this.markers.push(marker);\n                this.results.push(place); // Adjust the map bounds to include the location of this marker\n\n                bounds.extend(place.geometry.location);\n              });\n              /* Once all the markers have been placed, adjust the bounds of the map to\n               * show all the markers within the visible area. */\n\n              map.fitBounds(bounds);\n              console.log('+++++++++++++++'); // this.setMarkers(markers);\n\n              console.log(this.markers);\n              console.log('+++++++++++++++');\n            } else {\n              console.log(\"doesn't work\");\n            }\n          }));\n        });\n      };\n\n      const temp2 = () => {\n        return new Promise();\n        console.log('%%%%%%%%%%%%%%%');\n        this.results.forEach((place, index) => {\n          console.log('@@@@@@@@@@@@@@');\n          let marker = this.markers[index];\n          google.maps.event.addListener(marker, 'click', () => {\n            let request = {\n              placeId: place.place_id,\n              fields: ['name', 'formatted_address', 'geometry', 'rating', 'website', 'photos']\n            };\n            /* Only fetch the details of a place when the user clicks on a marker.\n             * If we fetch the details for all place results as soon as we get\n             * the search response, we will hit API rate limits. */\n\n            service.getDetails(request, (placeResult, status) => {\n              if (status == google.maps.places.PlacesServiceStatus.OK) {\n                let placeInfowindow = new google.maps.InfoWindow();\n                let rating = \"None\";\n                if (placeResult.rating) rating = placeResult.rating;\n                placeInfowindow.setContent('<div><strong>' + placeResult.name + '</strong><br>' + 'Rating: ' + rating + '</div>');\n                placeInfowindow.open(marker.map, marker);\n                currentInfoWindow.close();\n                currentInfoWindow = placeInfowindow;\n                console.log(\"reach here\"); // showPanel(placeResult);\n\n                if (infoPane.classList.contains(\"open\")) {\n                  infoPane.classList.remove(\"open\");\n                } // Clear the previous details\n\n\n                while (infoPane.lastChild) {\n                  infoPane.removeChild(infoPane.lastChild);\n                }\n                /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                // Add the primary photo, if there is one\n\n\n                if (placeResult.photos) {\n                  let firstPhoto = placeResult.photos[0];\n                  let photo = document.createElement('img');\n                  photo.classList.add('hero');\n                  photo.src = firstPhoto.getUrl();\n                  infoPane.appendChild(photo);\n                } // Add place details with text formatting\n\n\n                let name = document.createElement('h1');\n                name.classList.add('place');\n                name.textContent = placeResult.name;\n                infoPane.appendChild(name);\n\n                if (placeResult.rating) {\n                  let rating = document.createElement('p');\n                  rating.classList.add('details');\n                  rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                  infoPane.appendChild(rating);\n                }\n\n                let address = document.createElement('p');\n                address.classList.add('details');\n                address.textContent = placeResult.formatted_address;\n                infoPane.appendChild(address);\n\n                if (placeResult.website) {\n                  let websitePara = document.createElement('p');\n                  let websiteLink = document.createElement('a');\n                  let websiteUrl = document.createTextNode(placeResult.website);\n                  websiteLink.appendChild(websiteUrl);\n                  websiteLink.title = placeResult.website;\n                  websiteLink.href = placeResult.website;\n                  websitePara.appendChild(websiteLink);\n                  infoPane.appendChild(websitePara);\n                } // Open the infoPane\n\n\n                infoPane.classList.add(\"open\");\n              } else {\n                console.log('showDetails failed: ' + status);\n              } // showDetails(placeResult, marker, status)\n\n            });\n          });\n        });\n      };\n\n      temp(() => temp2());\n    };\n\n    console.log(11111);\n    this.state = {\n      mapProps: '',\n      map: '',\n      lat: 40.33,\n      lng: -74.57,\n      collapse: true\n    };\n    this.tRef = React.createRef();\n    this.markers = [];\n    this.results = []; // const classes = useStyles();\n  }\n\n  componentDidMount() {\n    console.log('cm====================');\n    console.log(this.tRef.current);\n    console.log(this.tRef.current.props);\n    console.log(this.tRef.current.map);\n    console.log('cm====================');\n  } // fetchPlaces(mapProps, map) {\n  //     console.log('fetchPlaces start print');\n  //     //\n  //     console.log(mapProps);\n  //     console.log(map);\n  //     //\n  //     console.log('fetchPlaces end print');\n  //\n  //     const {google} = mapProps;\n  //\n  //\n  //     const bounds = new google.maps.LatLngBounds();\n  //     const infoWindow = new google.maps.InfoWindow;\n  //     let currentInfoWindow = infoWindow;\n  //     const service = new google.maps.places.PlacesService(map);\n  //     let infoPane = document.getElementById('panel');\n  //\n  // }\n\n\n  //     //     /* TODO: Step 4B: Add click listeners to the markers */\n  //     // Add click listener to each marker\n  //     google.maps.event.addListener(marker, 'click', () => {\n  //     let request = {\n  //         placeId: place.place_id,\n  //         fields: ['name', 'formatted_address', 'geometry', 'rating',\n  //             'website', 'photos']\n  //     };\n  //\n  //     /* Only fetch the details of a place when the user clicks on a marker.\n  //      * If we fetch the details for all place results as soon as we get\n  //      * the search response, we will hit API rate limits. */\n  //     service.getDetails(request, (placeResult, status) => {\n  //     if (status == google.maps.places.PlacesServiceStatus.OK) {\n  //     let placeInfowindow = new google.maps.InfoWindow();\n  //     let rating = \"None\";\n  //     if (placeResult.rating) rating = placeResult.rating;\n  //     placeInfowindow.setContent('<div><strong>' + placeResult.name +\n  //     '</strong><br>' + 'Rating: ' + rating + '</div>');\n  //     placeInfowindow.open(marker.map, marker);\n  //     currentInfoWindow.close();\n  //     currentInfoWindow = placeInfowindow;\n  //     console.log(\"reach here\");\n  //     // showPanel(placeResult);\n  //\n  //     if (infoPane.classList.contains(\"open\"))\n  // {\n  //     infoPane.classList.remove(\"open\");\n  // }\n  //\n  // // Clear the previous details\n  // while (infoPane.lastChild) {\n  //     infoPane.removeChild(infoPane.lastChild);\n  // }\n  // /* TODO: Step 4E: Display a Place Photo with the Place Details */\n  // // Add the primary photo, if there is one\n  // if (placeResult.photos) {\n  //     let firstPhoto = placeResult.photos[0];\n  //     let photo = document.createElement('img');\n  //     photo.classList.add('hero');\n  //     photo.src = firstPhoto.getUrl();\n  //     infoPane.appendChild(photo);\n  // }\n  //\n  // // Add place details with text formatting\n  // let name = document.createElement('h1');\n  // name.classList.add('place');\n  // name.textContent = placeResult.name;\n  // infoPane.appendChild(name);\n  // if (placeResult.rating) {\n  //     let rating = document.createElement('p');\n  //     rating.classList.add('details');\n  //     rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n  //     infoPane.appendChild(rating);\n  // }\n  // let address = document.createElement('p');\n  // address.classList.add('details');\n  // address.textContent = placeResult.formatted_address;\n  // infoPane.appendChild(address);\n  // if (placeResult.website) {\n  //     let websitePara = document.createElement('p');\n  //     let websiteLink = document.createElement('a');\n  //     let websiteUrl = document.createTextNode(placeResult.website);\n  //     websiteLink.appendChild(websiteUrl);\n  //     websiteLink.title = placeResult.website;\n  //     websiteLink.href = placeResult.website;\n  //     websitePara.appendChild(websiteLink);\n  //     infoPane.appendChild(websitePara);\n  // }\n  //\n  // // Open the infoPane\n  // infoPane.classList.add(\"open\");\n  //\n  //\n  // } else {\n  //     console.log('showDetails failed: ' + status);\n  // }\n  //\n  //\n  // // showDetails(placeResult, marker, status)\n  // });\n  // });\n  showMap() {\n    const coordinates = [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      id: \"map\",\n      ref: this.tRef,\n      style: {\n        width: \"10\",\n        height: \"512\"\n      } // style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n      // onReady={(mapProps, map) => this.setMapProps(mapProps, map)}\n      ,\n      google: this.props.google // onReady={(mapProps,map) => this.fetchPlaces(mapProps, map)}\n      ,\n      zoom: 16,\n      initialCenter: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      visible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      name: 'Center',\n      position: {\n        lat: this.state.lat,\n        lng: this.state.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testProps('restaurant'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 21\n      }\n    }, \"restaurant\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.testProps('hotel'),\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 21\n      }\n    }, \"hotel\"), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 21\n      }\n    }, this.state.collapse === true ? this.showMap() : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 73\n      }\n    }))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\"\n})(Locations);\n{\n  /*<Marker position={{ lat: 40.33, lng: -74.57}} />*/\n}\n{\n  /*<Marker onClick={this.onMarkerClick}*/\n}\n{\n  /*name={'Current location'} />*/\n}\n{\n  /*<InfoWindow*/\n}\n{\n  /*marker={this.state.activeMarker}*/\n}\n{\n  /*visible={this.state.showingInfoWindow}>*/\n}\n{\n  /*<div>*/\n}\n{\n  /*<h1>{this.state.selectedPlace.name}</h1>*/\n}\n{\n  /*</div>*/\n}\n{\n  /*</InfoWindow>*/\n}","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js"],"names":["Component","GoogleApiWrapper","Map","Marker","React","Card","makeStyles","Container","CardBody","Button","setMarkers","values","markers","console","log","Locations","constructor","props","dropdown","setState","collapse","state","setMapOnAll","map","i","length","setMap","clearMarkers","deleteMarkers","testProps","value","google","tRef","current","bounds","maps","LatLngBounds","infoWindow","InfoWindow","currentInfoWindow","service","places","PlacesService","infoPane","document","getElementById","request","location","lat","lng","rankBy","RankBy","DISTANCE","keyword","temp","Promise","resolve","reject","nearbySearch","results","status","PlacesServiceStatus","OK","forEach","place","marker","position","geometry","title","name","push","extend","fitBounds","temp2","index","event","addListener","placeId","place_id","fields","getDetails","placeResult","placeInfowindow","rating","setContent","open","close","classList","contains","remove","lastChild","removeChild","photos","firstPhoto","photo","createElement","add","src","getUrl","appendChild","textContent","address","formatted_address","website","websitePara","websiteLink","websiteUrl","createTextNode","href","mapProps","createRef","componentDidMount","showMap","coordinates","width","height","render","apiKey"],"mappings":"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AK,EADT,CAAJ;AAIH,KAjQkB;;AAEf5D,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,SAAKO,KAAL,GAAa;AACTwF,MAAAA,QAAQ,EAAE,EADD;AAETtF,MAAAA,GAAG,EAAE,EAFI;AAGTyB,MAAAA,GAAG,EAAE,KAHI;AAITC,MAAAA,GAAG,EAAE,CAAC,KAJG;AAKT7B,MAAAA,QAAQ,EAAE;AALD,KAAb;AAOA,SAAKY,IAAL,GAAY5B,KAAK,CAAC0G,SAAN,EAAZ;AACA,SAAKlG,OAAL,GAAe,EAAf;AACA,SAAK+C,OAAL,GAAe,EAAf,CAZe,CAaf;AACH;;AAQDoD,EAAAA,iBAAiB,GAAG;AAChBlG,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKkB,IAAL,CAAUC,OAAtB;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKkB,IAAL,CAAUC,OAAV,CAAkBhB,KAA9B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKkB,IAAL,CAAUC,OAAV,CAAkBV,GAA9B;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,GA7B6B,CAkC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAmNJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQIkG,EAAAA,OAAO,GAAG;AACN,UAAMC,WAAW,GAAG,EAApB;AAGA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAG,KAAV;AACK,MAAA,GAAG,EAAI,KAAKjF,IADjB;AAEI,MAAA,KAAK,EAAE;AAACkF,QAAAA,KAAK,EAAE,IAAR;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OAFX,CAGI;AACA;AAJJ;AAKI,MAAA,MAAM,EAAE,KAAKlG,KAAL,CAAWc,MALvB,CAMI;AANJ;AAQI,MAAA,IAAI,EAAE,EARV;AASI,MAAA,aAAa,EAAE;AACXiB,QAAAA,GAAG,EAAE,KADM;AACCC,QAAAA,GAAG,EAAE,CAAC;AADP,OATnB;AAYI,MAAA,OAAO,EAAE,IAZb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAcI,oBAAC,MAAD;AACI,MAAA,IAAI,EAAE,QADV;AAEI,MAAA,QAAQ,EAAE;AAACD,QAAAA,GAAG,EAAE,KAAK3B,KAAL,CAAW2B,GAAjB;AAAsBC,QAAAA,GAAG,EAAE,KAAK5B,KAAL,CAAW4B;AAAtC,OAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,CADJ,CADJ;AAuBH;;AAODmE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKvF,SAAL,CAAe,YAAf,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKA,SAAL,CAAe,OAAf,CAAvB;AAAgD,MAAA,IAAI,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,eAGI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKR,KAAL,CAAWD,QAAX,KAAwB,IAAxB,GAA+B,KAAK4F,OAAL,EAA/B,gBAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpD,CAHJ,CAHJ,CADJ;AAaH;;AAhZ6B;;AAoZlC,eAAe/G,gBAAgB,CAAC;AAC5BoH,EAAAA,MAAM,EAAG;AADmB,CAAD,CAAhB,CAEZtG,SAFY,CAAf;AAKA;AAAC;AAAqD;AAEtD;AAAC;AAAyC;AAC1C;AAAC;AAAiC;AAElC;AAAC;AAAgB;AACjB;AAAC;AAAqC;AACtC;AAAC;AAA4C;AAC7C;AAAC;AAAU;AACX;AAAC;AAA6C;AAC9C;AAAC;AAAW;AACZ;AAAC;AAAkB","sourcesContent":["import {Component} from \"react\";\nimport {GoogleApiWrapper, Map, Marker} from \"google-maps-react\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport {makeStyles} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport {CardBody} from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\n\n\n\n// const useStyles = makeStyles(() => ({\n//     frame:{\n//         width: \"10\",\n//         height: \"512\"\n//     }\n// }));\n\nconst setMarkers = (values) => {\n    this.markers = values;\n    console.log(this.markers);\n}\n\n\nclass Locations extends Component {\n    constructor(props) {\n        super(props);\n        console.log(11111);\n        this.state = {\n            mapProps: '',\n            map: '',\n            lat: 40.33,\n            lng: -74.57,\n            collapse: true,\n        };\n        this.tRef = React.createRef();\n        this.markers = [];\n        this.results = [];\n        // const classes = useStyles();\n    }\n\n\n    dropdown = () => {\n        this.setState({collapse: !this.state.collapse})\n    }\n\n\n    componentDidMount() {\n        console.log('cm====================');\n        console.log(this.tRef.current);\n        console.log(this.tRef.current.props);\n        console.log(this.tRef.current.map);\n        console.log('cm====================');\n    }\n\n\n\n\n    // fetchPlaces(mapProps, map) {\n    //     console.log('fetchPlaces start print');\n    //     //\n    //     console.log(mapProps);\n    //     console.log(map);\n    //     //\n    //     console.log('fetchPlaces end print');\n    //\n    //     const {google} = mapProps;\n    //\n    //\n    //     const bounds = new google.maps.LatLngBounds();\n    //     const infoWindow = new google.maps.InfoWindow;\n    //     let currentInfoWindow = infoWindow;\n    //     const service = new google.maps.places.PlacesService(map);\n    //     let infoPane = document.getElementById('panel');\n    //\n    // }\n\n    setMapOnAll = (map) => {\n        for (let i = 0; i < this.markers.length; i++) {\n            this.markers[i].setMap(map);\n        }\n    }\n\n    // Removes the markers from the map, but keeps them in the array.\n    clearMarkers = () => {\n        this.setMapOnAll(null);\n    }\n\n\n    // Deletes all markers in the array by removing references to them.\n    deleteMarkers = () => {\n        this.clearMarkers();\n        this.markers = [];\n    }\n\n\n\n\n    testProps = (value) => {\n        console.log(222222);\n        console.log('&&&&&&&&&&&');\n        console.log(this.markers);\n        console.log('&&&&&&&&&&&');\n\n\n        // console.log(this.tRef.current);\n        const {google} = this.tRef.current.props;\n\n        let map = this.tRef.current.map;\n\n        const bounds = new google.maps.LatLngBounds();\n        const infoWindow = new google.maps.InfoWindow;\n        let currentInfoWindow = infoWindow;\n        const service = new google.maps.places.PlacesService(map);\n        let infoPane = document.getElementById('panel');\n\n        let request = {\n            location: {\n                lat: 40.33, lng: -74.57\n            },\n            rankBy: this.props.google.maps.places.RankBy.DISTANCE,\n\n            // keyword: isNull ? 'hotel':this.state.keyword\n            // keyword: this.state.keyword\n            keyword: value\n        };\n\n\n        const temp = () => {\n\n            return new Promise(function(resolve, reject)\n            {\n                resolve(\n                    service.nearbySearch(request, (results, status) => {\n                        if (status == google.maps.places.PlacesServiceStatus.OK) {\n\n                            console.log(status);\n                            results.forEach(place => {\n                                let marker = new google.maps.Marker({\n                                    position: place.geometry.location,\n                                    map: map,\n                                    title: place.name\n                                });\n\n                                this.markers.push(marker);\n                                this.results.push(place);\n\n\n                                // Adjust the map bounds to include the location of this marker\n                                bounds.extend(place.geometry.location);\n                            });\n\n\n                            /* Once all the markers have been placed, adjust the bounds of the map to\n                             * show all the markers within the visible area. */\n                            map.fitBounds(bounds);\n                            console.log('+++++++++++++++');\n                            // this.setMarkers(markers);\n                            console.log(this.markers);\n                            console.log('+++++++++++++++');\n\n                        }\n                        else {\n                            console.log(\"doesn't work\");\n                        }\n\n\n                    })\n\n                );\n            });\n\n\n\n        }\n\n\n\n\n        const temp2 = () => {\n\n            return new Promise()\n            console.log('%%%%%%%%%%%%%%%');\n\n\n            this.results.forEach((place, index) => {\n\n                console.log('@@@@@@@@@@@@@@');\n\n\n                let marker = this.markers[index];\n                google.maps.event.addListener(marker, 'click', () => {\n                    let request = {\n                        placeId: place.place_id,\n                        fields: ['name', 'formatted_address', 'geometry', 'rating',\n                            'website', 'photos']\n                    };\n\n                    /* Only fetch the details of a place when the user clicks on a marker.\n                     * If we fetch the details for all place results as soon as we get\n                     * the search response, we will hit API rate limits. */\n                    service.getDetails(request, (placeResult, status) => {\n                        if (status == google.maps.places.PlacesServiceStatus.OK) {\n                            let placeInfowindow = new google.maps.InfoWindow();\n                            let rating = \"None\";\n                            if (placeResult.rating) rating = placeResult.rating;\n                            placeInfowindow.setContent('<div><strong>' + placeResult.name +\n                                '</strong><br>' + 'Rating: ' + rating + '</div>');\n                            placeInfowindow.open(marker.map, marker);\n                            currentInfoWindow.close();\n                            currentInfoWindow = placeInfowindow;\n                            console.log(\"reach here\");\n                            // showPanel(placeResult);\n\n                            if (infoPane.classList.contains(\"open\")) {\n                                infoPane.classList.remove(\"open\");\n                            }\n\n                            // Clear the previous details\n                            while (infoPane.lastChild) {\n                                infoPane.removeChild(infoPane.lastChild);\n                            }\n\n                            /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                            // Add the primary photo, if there is one\n                            if (placeResult.photos) {\n                                let firstPhoto = placeResult.photos[0];\n                                let photo = document.createElement('img');\n                                photo.classList.add('hero');\n                                photo.src = firstPhoto.getUrl();\n                                infoPane.appendChild(photo);\n                            }\n\n                            // Add place details with text formatting\n                            let name = document.createElement('h1');\n                            name.classList.add('place');\n                            name.textContent = placeResult.name;\n                            infoPane.appendChild(name);\n\n                            if (placeResult.rating) {\n                                let rating = document.createElement('p');\n                                rating.classList.add('details');\n                                rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                                infoPane.appendChild(rating);\n                            }\n\n                            let address = document.createElement('p');\n                            address.classList.add('details');\n                            address.textContent = placeResult.formatted_address;\n                            infoPane.appendChild(address);\n                            if (placeResult.website) {\n                                let websitePara = document.createElement('p');\n                                let websiteLink = document.createElement('a');\n                                let websiteUrl = document.createTextNode(placeResult.website);\n                                websiteLink.appendChild(websiteUrl);\n                                websiteLink.title = placeResult.website;\n                                websiteLink.href = placeResult.website;\n                                websitePara.appendChild(websiteLink);\n                                infoPane.appendChild(websitePara);\n                            }\n\n                            // Open the infoPane\n                            infoPane.classList.add(\"open\");\n\n\n                        }\n                        else {\n                            console.log('showDetails failed: ' + status);\n                        }\n\n\n                        // showDetails(placeResult, marker, status)\n                    })\n                })\n\n            });\n        }\n\n        temp(\n            ()=>temp2()\n        );\n\n    }\n\n\n\n//     //     /* TODO: Step 4B: Add click listeners to the markers */\n//     // Add click listener to each marker\n//     google.maps.event.addListener(marker, 'click', () => {\n//     let request = {\n//         placeId: place.place_id,\n//         fields: ['name', 'formatted_address', 'geometry', 'rating',\n//             'website', 'photos']\n//     };\n//\n//     /* Only fetch the details of a place when the user clicks on a marker.\n//      * If we fetch the details for all place results as soon as we get\n//      * the search response, we will hit API rate limits. */\n//     service.getDetails(request, (placeResult, status) => {\n//     if (status == google.maps.places.PlacesServiceStatus.OK) {\n//     let placeInfowindow = new google.maps.InfoWindow();\n//     let rating = \"None\";\n//     if (placeResult.rating) rating = placeResult.rating;\n//     placeInfowindow.setContent('<div><strong>' + placeResult.name +\n//     '</strong><br>' + 'Rating: ' + rating + '</div>');\n//     placeInfowindow.open(marker.map, marker);\n//     currentInfoWindow.close();\n//     currentInfoWindow = placeInfowindow;\n//     console.log(\"reach here\");\n//     // showPanel(placeResult);\n//\n//     if (infoPane.classList.contains(\"open\"))\n// {\n//     infoPane.classList.remove(\"open\");\n// }\n//\n// // Clear the previous details\n// while (infoPane.lastChild) {\n//     infoPane.removeChild(infoPane.lastChild);\n// }\n\n// /* TODO: Step 4E: Display a Place Photo with the Place Details */\n// // Add the primary photo, if there is one\n// if (placeResult.photos) {\n//     let firstPhoto = placeResult.photos[0];\n//     let photo = document.createElement('img');\n//     photo.classList.add('hero');\n//     photo.src = firstPhoto.getUrl();\n//     infoPane.appendChild(photo);\n// }\n//\n// // Add place details with text formatting\n// let name = document.createElement('h1');\n// name.classList.add('place');\n// name.textContent = placeResult.name;\n// infoPane.appendChild(name);\n// if (placeResult.rating) {\n//     let rating = document.createElement('p');\n//     rating.classList.add('details');\n//     rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n//     infoPane.appendChild(rating);\n// }\n// let address = document.createElement('p');\n// address.classList.add('details');\n// address.textContent = placeResult.formatted_address;\n// infoPane.appendChild(address);\n// if (placeResult.website) {\n//     let websitePara = document.createElement('p');\n//     let websiteLink = document.createElement('a');\n//     let websiteUrl = document.createTextNode(placeResult.website);\n//     websiteLink.appendChild(websiteUrl);\n//     websiteLink.title = placeResult.website;\n//     websiteLink.href = placeResult.website;\n//     websitePara.appendChild(websiteLink);\n//     infoPane.appendChild(websitePara);\n// }\n//\n// // Open the infoPane\n// infoPane.classList.add(\"open\");\n//\n//\n// } else {\n//     console.log('showDetails failed: ' + status);\n// }\n//\n//\n// // showDetails(placeResult, marker, status)\n// });\n// });\n\n\n\n\n\n\n\n    showMap() {\n        const coordinates = [];\n\n\n        return (\n            <div>\n                <Map id = \"map\"\n                     ref = {this.tRef}\n                    style={{width: \"10\", height: \"512\"}}\n                    // style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n                    // onReady={(mapProps, map) => this.setMapProps(mapProps, map)}\n                    google={this.props.google}\n                    // onReady={(mapProps,map) => this.fetchPlaces(mapProps, map)}\n\n                    zoom={16}\n                    initialCenter={{\n                        lat: 40.33, lng: -74.57\n                    }}\n                    visible={true}\n                >\n                    <Marker\n                        name={'Center'}\n                        position={{lat: this.state.lat, lng: this.state.lng}}\n                    />\n                </Map>\n            </div>\n        );\n    }\n\n\n\n\n\n\n    render() {\n        return (\n            <div>\n                <div id=\"panel\"></div>\n                {/*// Important! Always set the container height explicitly*/}\n                <Container>\n                    <button onClick={() => this.testProps('restaurant')}>restaurant</button>\n                    <Button onClick={() => this.testProps('hotel')} size='lg'>hotel</Button>\n                    <Card>\n                        {this.state.collapse === true ? this.showMap(): <span></span> }\n                    </Card>\n                </Container>\n            </div>\n        );\n    }\n}\n\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n})(Locations)\n\n\n{/*<Marker position={{ lat: 40.33, lng: -74.57}} />*/}\n\n{/*<Marker onClick={this.onMarkerClick}*/}\n{/*name={'Current location'} />*/}\n\n{/*<InfoWindow*/}\n{/*marker={this.state.activeMarker}*/}\n{/*visible={this.state.showingInfoWindow}>*/}\n{/*<div>*/}\n{/*<h1>{this.state.selectedPlace.name}</h1>*/}\n{/*</div>*/}\n{/*</InfoWindow>*/}"]},"metadata":{},"sourceType":"module"}