{"ast":null,"code":"import { appConstants } from \"../constants/constant\";\nimport axios from 'axios';\nexport const checkLogin = () => {\n  const checkLoginPromise = fetch('http://localhost:8089/checklogin', {\n    credentials: 'include'\n  }).then(res => res.json()).catch();\n  return {\n    type: appConstants.CHECK_LOGIN,\n    payload: checkLoginPromise\n  };\n};\nexport const login = (user, success, failure) => {\n  // we can use a library called qs   qs.stringify(user) to get a urlencoded form data\n  const userFormData = new FormData();\n  userFormData.append('username', user.username);\n  userFormData.append('password', user.password); // ES6 fetch API, async, await\n\n  const loginPromise = fetch('http://localhost:8089/login', {\n    method: 'POST',\n    body: userFormData,\n    credentials: 'include'\n  }).then(res => res.json()).then(res => {\n    console.log(res);\n    res.success ? typeof success === 'function' && success() : typeof failure === 'function' && failure();\n    return res;\n  }).catch(err => {\n    typeof failure === 'function' && failure(err);\n    return err;\n  });\n  return {\n    type: appConstants.LOGIN,\n    payload: loginPromise\n  };\n};\nconst API = 'http://localhost:8089';\nexport const register = (user, success, failure) => {\n  const addProductPromise = axios.post(`${API}/products`, newProduct).then(res => {\n    // TODO: check success and failure and make sure it's a function (tech debt)\n    res.data.success ? success() : failure();\n  });\n  return {\n    type: appConstants.ADD_PRODUCT,\n    payload: addProductPromise\n  };\n}; // export const register = (user, success, failure) => {\n//     // we can use a library called qs   qs.stringify(user) to get a urlencoded form data\n//     // const userFormData = new FormData();\n//     // userFormData.append('username', user.username);\n//     // userFormData.append('password', user.password);\n//     const jsf = JSON.stringify(user);\n//     // ES6 fetch API, async, await\n//     console.log(jsf);\n//     const registerPromise = fetch(\n//         'http://localhost:8089/users',\n//         {\n//             method: 'POST',\n//             body: jsf,\n//             credentials: 'include'\n//         }\n//         )\n//             .then(res => res.json())\n//             .then(res => {\n//                 res.success ?\n//                     typeof success === 'function' && success() :\n//                     typeof failure === 'function' && failure();\n//                 return res;\n//             })\n//             .catch(err => {\n//                 typeof failure === 'function' && failure(err);\n//                 return err;\n//             })\n//     ;\n//     return {\n//         type: appConstants.REGISTER,\n//         payload: registerPromise\n//     };\n// };","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/actions/auth.action.js"],"names":["appConstants","axios","checkLogin","checkLoginPromise","fetch","credentials","then","res","json","catch","type","CHECK_LOGIN","payload","login","user","success","failure","userFormData","FormData","append","username","password","loginPromise","method","body","console","log","err","LOGIN","API","register","addProductPromise","post","newProduct","data","ADD_PRODUCT"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B,QAAMC,iBAAiB,GAAGC,KAAK,CAAC,kCAAD,EAAqC;AAACC,IAAAA,WAAW,EAAE;AAAd,GAArC,CAAL,CACrBC,IADqB,CAChBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADS,EAErBC,KAFqB,EAA1B;AAGA,SAAO;AACHC,IAAAA,IAAI,EAAEV,YAAY,CAACW,WADhB;AAEHC,IAAAA,OAAO,EAAET;AAFN,GAAP;AAIH,CARM;AAWP,OAAO,MAAMU,KAAK,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AAC7C;AACA,QAAMC,YAAY,GAAG,IAAIC,QAAJ,EAArB;AACAD,EAAAA,YAAY,CAACE,MAAb,CAAoB,UAApB,EAAgCL,IAAI,CAACM,QAArC;AACAH,EAAAA,YAAY,CAACE,MAAb,CAAoB,UAApB,EAAgCL,IAAI,CAACO,QAArC,EAJ6C,CAK7C;;AACA,QAAMC,YAAY,GAAGlB,KAAK,CACtB,6BADsB,EAEtB;AACImB,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,IAAI,EAAEP,YAFV;AAGIZ,IAAAA,WAAW,EAAE;AAHjB,GAFsB,CAAL,CAQZC,IARY,CAQPC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARA,EASZF,IATY,CASPC,GAAG,IAAI;AACTkB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,GAAZ;AACAA,IAAAA,GAAG,CAACQ,OAAJ,GACI,OAAOA,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAD5C,GAEI,OAAOC,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAF5C;AAGA,WAAOT,GAAP;AACH,GAfY,EAgBZE,KAhBY,CAgBNkB,GAAG,IAAI;AACV,WAAOX,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,CAACW,GAAD,CAAxC;AACA,WAAOA,GAAP;AACH,GAnBY,CAArB;AAqBA,SAAO;AACHjB,IAAAA,IAAI,EAAEV,YAAY,CAAC4B,KADhB;AAEHhB,IAAAA,OAAO,EAAEU;AAFN,GAAP;AAIH,CA/BM;AAmCP,MAAMO,GAAG,GAAG,uBAAZ;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAChB,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AAChD,QAAMe,iBAAiB,GAAG9B,KAAK,CAAC+B,IAAN,CAAY,GAAEH,GAAI,WAAlB,EAA8BI,UAA9B,EACrB3B,IADqB,CAChBC,GAAG,IAAI;AACT;AACAA,IAAAA,GAAG,CAAC2B,IAAJ,CAASnB,OAAT,GAAmBA,OAAO,EAA1B,GAA+BC,OAAO,EAAtC;AACH,GAJqB,CAA1B;AAKA,SAAO;AACHN,IAAAA,IAAI,EAAEV,YAAY,CAACmC,WADhB;AAEHvB,IAAAA,OAAO,EAAEmB;AAFN,GAAP;AAIH,CAVM,C,CAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {appConstants} from \"../constants/constant\";\nimport axios from 'axios';\n\nexport const checkLogin = () => {\n    const checkLoginPromise = fetch('http://localhost:8089/checklogin', {credentials: 'include'})\n        .then(res => res.json())\n        .catch();\n    return {\n        type: appConstants.CHECK_LOGIN,\n        payload: checkLoginPromise\n    };\n};\n\n\nexport const login = (user, success, failure) => {\n    // we can use a library called qs   qs.stringify(user) to get a urlencoded form data\n    const userFormData = new FormData();\n    userFormData.append('username', user.username);\n    userFormData.append('password', user.password);\n    // ES6 fetch API, async, await\n    const loginPromise = fetch(\n        'http://localhost:8089/login',\n        {\n            method: 'POST',\n            body: userFormData,\n            credentials: 'include'\n        }\n        )\n            .then(res => res.json())\n            .then(res => {\n                console.log(res);\n                res.success ?\n                    typeof success === 'function' && success() :\n                    typeof failure === 'function' && failure();\n                return res;\n            })\n            .catch(err => {\n                typeof failure === 'function' && failure(err);\n                return err;\n            })\n    ;\n    return {\n        type: appConstants.LOGIN,\n        payload: loginPromise\n    };\n};\n\n\n\nconst API = 'http://localhost:8089';\n\nexport const register = (user, success, failure) => {\n    const addProductPromise = axios.post(`${API}/products`, newProduct)\n        .then(res => {\n            // TODO: check success and failure and make sure it's a function (tech debt)\n            res.data.success ? success() : failure();\n        });\n    return {\n        type: appConstants.ADD_PRODUCT,\n        payload: addProductPromise\n    };\n};\n\n\n\n\n\n// export const register = (user, success, failure) => {\n//     // we can use a library called qs   qs.stringify(user) to get a urlencoded form data\n//     // const userFormData = new FormData();\n//     // userFormData.append('username', user.username);\n//     // userFormData.append('password', user.password);\n//     const jsf = JSON.stringify(user);\n//     // ES6 fetch API, async, await\n//     console.log(jsf);\n//     const registerPromise = fetch(\n//         'http://localhost:8089/users',\n//         {\n//             method: 'POST',\n//             body: jsf,\n//             credentials: 'include'\n//         }\n//         )\n//             .then(res => res.json())\n//             .then(res => {\n//                 res.success ?\n//                     typeof success === 'function' && success() :\n//                     typeof failure === 'function' && failure();\n//                 return res;\n//             })\n//             .catch(err => {\n//                 typeof failure === 'function' && failure(err);\n//                 return err;\n//             })\n//     ;\n//     return {\n//         type: appConstants.REGISTER,\n//         payload: registerPromise\n//     };\n// };"]},"metadata":{},"sourceType":"module"}