{"ast":null,"code":"var _jsxFileName = \"/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js\";\nimport { Component } from \"react\";\nimport { GoogleApiWrapper, Map, Marker } from \"google-maps-react\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport { CardBody } from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\"; // const useStyles = makeStyles(() => ({\n//     frame:{\n//         width: \"10\",\n//         height: \"512\"\n//     }\n// }));\n\nconst setMarkers = values => {\n  this.markers = values;\n  console.log(this.markers);\n};\n\nclass Locations extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dropdown = () => {\n      this.setState({\n        collapse: !this.state.collapse\n      });\n    };\n\n    this.testProps = value => {\n      console.log(222222);\n      console.log('&&&&&&&&&&&');\n      console.log(this.markers);\n      console.log('&&&&&&&&&&&'); // console.log(this.tRef.current);\n\n      const {\n        google\n      } = this.tRef.current.props;\n      let map = this.tRef.current.map;\n      const bounds = new google.maps.LatLngBounds();\n      const infoWindow = new google.maps.InfoWindow();\n      let currentInfoWindow = infoWindow;\n      const service = new google.maps.places.PlacesService(map);\n      let infoPane = document.getElementById('panel');\n      let request = {\n        location: {\n          lat: 40.33,\n          lng: -74.57\n        },\n        rankBy: this.props.google.maps.places.RankBy.DISTANCE,\n        // keyword: isNull ? 'hotel':this.state.keyword\n        // keyword: this.state.keyword\n        keyword: value\n      };\n      service.nearbySearch(request, (results, status) => {\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\n          console.log(status);\n          results.forEach(place => {\n            let marker = new google.maps.Marker({\n              position: place.geometry.location,\n              map: map,\n              title: place.name\n            });\n            this.markers.push(marker);\n            this.results.push(place); // Adjust the map bounds to include the location of this marker\n\n            bounds.extend(place.geometry.location);\n          });\n          /* Once all the markers have been placed, adjust the bounds of the map to\n           * show all the markers within the visible area. */\n\n          map.fitBounds(bounds);\n          console.log('+++++++++++++++'); // this.setMarkers(markers);\n\n          console.log(this.markers);\n          console.log('+++++++++++++++');\n        } else {\n          console.log(\"doesn't work\");\n        }\n      });\n      this.results.forEach((place, index) => {\n        let marker = this.markers[index];\n        google.maps.event.addListener(marker, 'click', () => {\n          let request = {\n            placeId: place.place_id,\n            fields: ['name', 'formatted_address', 'geometry', 'rating', 'website', 'photos']\n          };\n          /* Only fetch the details of a place when the user clicks on a marker.\n           * If we fetch the details for all place results as soon as we get\n           * the search response, we will hit API rate limits. */\n\n          service.getDetails(request, (placeResult, status) => {\n            if (status == google.maps.places.PlacesServiceStatus.OK) {\n              let placeInfowindow = new google.maps.InfoWindow();\n              let rating = \"None\";\n              if (placeResult.rating) rating = placeResult.rating;\n              placeInfowindow.setContent('<div><strong>' + placeResult.name + '</strong><br>' + 'Rating: ' + rating + '</div>');\n              placeInfowindow.open(marker.map, marker);\n              currentInfoWindow.close();\n              currentInfoWindow = placeInfowindow;\n              console.log(\"reach here\"); // showPanel(placeResult);\n\n              if (infoPane.classList.contains(\"open\")) {\n                infoPane.classList.remove(\"open\");\n              } // Clear the previous details\n\n\n              while (infoPane.lastChild) {\n                infoPane.removeChild(infoPane.lastChild);\n              }\n              /* TODO: Step 4E: Display a Place Photo with the Place Details */\n              // Add the primary photo, if there is one\n\n\n              if (placeResult.photos) {\n                let firstPhoto = placeResult.photos[0];\n                let photo = document.createElement('img');\n                photo.classList.add('hero');\n                photo.src = firstPhoto.getUrl();\n                infoPane.appendChild(photo);\n              } // Add place details with text formatting\n\n\n              let name = document.createElement('h1');\n              name.classList.add('place');\n              name.textContent = placeResult.name;\n              infoPane.appendChild(name);\n\n              if (placeResult.rating) {\n                let rating = document.createElement('p');\n                rating.classList.add('details');\n                rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                infoPane.appendChild(rating);\n              }\n\n              let address = document.createElement('p');\n              address.classList.add('details');\n              address.textContent = placeResult.formatted_address;\n              infoPane.appendChild(address);\n\n              if (placeResult.website) {\n                let websitePara = document.createElement('p');\n                let websiteLink = document.createElement('a');\n                let websiteUrl = document.createTextNode(placeResult.website);\n                websiteLink.appendChild(websiteUrl);\n                websiteLink.title = placeResult.website;\n                websiteLink.href = placeResult.website;\n                websitePara.appendChild(websiteLink);\n                infoPane.appendChild(websitePara);\n              } // Open the infoPane\n\n\n              infoPane.classList.add(\"open\");\n            } else {\n              console.log('showDetails failed: ' + status);\n            } // showDetails(placeResult, marker, status)\n\n          });\n        });\n      });\n    };\n\n    console.log(11111);\n    this.state = {\n      mapProps: '',\n      map: '',\n      lat: 40.33,\n      lng: -74.57,\n      collapse: true\n    };\n    this.tRef = React.createRef();\n    this.markers = [];\n    this.results = []; // const classes = useStyles();\n  }\n\n  componentDidMount() {\n    console.log('cm====================');\n    console.log(this.tRef.current);\n    console.log(this.tRef.current.props);\n    console.log(this.tRef.current.map);\n    console.log('cm====================');\n  } // fetchPlaces(mapProps, map) {\n  //     console.log('fetchPlaces start print');\n  //     //\n  //     console.log(mapProps);\n  //     console.log(map);\n  //     //\n  //     console.log('fetchPlaces end print');\n  //\n  //     const {google} = mapProps;\n  //\n  //\n  //     const bounds = new google.maps.LatLngBounds();\n  //     const infoWindow = new google.maps.InfoWindow;\n  //     let currentInfoWindow = infoWindow;\n  //     const service = new google.maps.places.PlacesService(map);\n  //     let infoPane = document.getElementById('panel');\n  //\n  // }\n\n\n  //     //     /* TODO: Step 4B: Add click listeners to the markers */\n  //     // Add click listener to each marker\n  //     google.maps.event.addListener(marker, 'click', () => {\n  //     let request = {\n  //         placeId: place.place_id,\n  //         fields: ['name', 'formatted_address', 'geometry', 'rating',\n  //             'website', 'photos']\n  //     };\n  //\n  //     /* Only fetch the details of a place when the user clicks on a marker.\n  //      * If we fetch the details for all place results as soon as we get\n  //      * the search response, we will hit API rate limits. */\n  //     service.getDetails(request, (placeResult, status) => {\n  //     if (status == google.maps.places.PlacesServiceStatus.OK) {\n  //     let placeInfowindow = new google.maps.InfoWindow();\n  //     let rating = \"None\";\n  //     if (placeResult.rating) rating = placeResult.rating;\n  //     placeInfowindow.setContent('<div><strong>' + placeResult.name +\n  //     '</strong><br>' + 'Rating: ' + rating + '</div>');\n  //     placeInfowindow.open(marker.map, marker);\n  //     currentInfoWindow.close();\n  //     currentInfoWindow = placeInfowindow;\n  //     console.log(\"reach here\");\n  //     // showPanel(placeResult);\n  //\n  //     if (infoPane.classList.contains(\"open\"))\n  // {\n  //     infoPane.classList.remove(\"open\");\n  // }\n  //\n  // // Clear the previous details\n  // while (infoPane.lastChild) {\n  //     infoPane.removeChild(infoPane.lastChild);\n  // }\n  // /* TODO: Step 4E: Display a Place Photo with the Place Details */\n  // // Add the primary photo, if there is one\n  // if (placeResult.photos) {\n  //     let firstPhoto = placeResult.photos[0];\n  //     let photo = document.createElement('img');\n  //     photo.classList.add('hero');\n  //     photo.src = firstPhoto.getUrl();\n  //     infoPane.appendChild(photo);\n  // }\n  //\n  // // Add place details with text formatting\n  // let name = document.createElement('h1');\n  // name.classList.add('place');\n  // name.textContent = placeResult.name;\n  // infoPane.appendChild(name);\n  // if (placeResult.rating) {\n  //     let rating = document.createElement('p');\n  //     rating.classList.add('details');\n  //     rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n  //     infoPane.appendChild(rating);\n  // }\n  // let address = document.createElement('p');\n  // address.classList.add('details');\n  // address.textContent = placeResult.formatted_address;\n  // infoPane.appendChild(address);\n  // if (placeResult.website) {\n  //     let websitePara = document.createElement('p');\n  //     let websiteLink = document.createElement('a');\n  //     let websiteUrl = document.createTextNode(placeResult.website);\n  //     websiteLink.appendChild(websiteUrl);\n  //     websiteLink.title = placeResult.website;\n  //     websiteLink.href = placeResult.website;\n  //     websitePara.appendChild(websiteLink);\n  //     infoPane.appendChild(websitePara);\n  // }\n  //\n  // // Open the infoPane\n  // infoPane.classList.add(\"open\");\n  //\n  //\n  // } else {\n  //     console.log('showDetails failed: ' + status);\n  // }\n  //\n  //\n  // // showDetails(placeResult, marker, status)\n  // });\n  // });\n  showMap() {\n    const coordinates = [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      id: \"map\",\n      ref: this.tRef,\n      style: {\n        width: \"10\",\n        height: \"512\"\n      } // style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n      // onReady={(mapProps, map) => this.setMapProps(mapProps, map)}\n      ,\n      google: this.props.google // onReady={(mapProps,map) => this.fetchPlaces(mapProps, map)}\n      ,\n      zoom: 16,\n      initialCenter: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      visible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      name: 'Center',\n      position: {\n        lat: this.state.lat,\n        lng: this.state.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testProps('restaurant'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 21\n      }\n    }, \"restaurant\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.testProps('hotel'),\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 21\n      }\n    }, \"hotel\"), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 21\n      }\n    }, this.state.collapse === true ? this.showMap() : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 73\n      }\n    }))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\"\n})(Locations);\n{\n  /*<Marker position={{ lat: 40.33, lng: -74.57}} />*/\n}\n{\n  /*<Marker onClick={this.onMarkerClick}*/\n}\n{\n  /*name={'Current location'} />*/\n}\n{\n  /*<InfoWindow*/\n}\n{\n  /*marker={this.state.activeMarker}*/\n}\n{\n  /*visible={this.state.showingInfoWindow}>*/\n}\n{\n  /*<div>*/\n}\n{\n  /*<h1>{this.state.selectedPlace.name}</h1>*/\n}\n{\n  /*</div>*/\n}\n{\n  /*</InfoWindow>*/\n}","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js"],"names":["Component","GoogleApiWrapper","Map","Marker","React","Card","makeStyles","Container","CardBody","Button","setMarkers","values","markers","console","log","Locations","constructor","props","dropdown","setState","collapse","state","testProps","value","google","tRef","current","map","bounds","maps","LatLngBounds","infoWindow","InfoWindow","currentInfoWindow","service","places","PlacesService","infoPane","document","getElementById","request","location","lat","lng","rankBy","RankBy","DISTANCE","keyword","nearbySearch","results","status","PlacesServiceStatus","OK","forEach","place","marker","position","geometry","title","name","push","extend","fitBounds","index","event","addListener","placeId","place_id","fields","getDetails","placeResult","placeInfowindow","rating","setContent","open","close","classList","contains","remove","lastChild","removeChild","photos","firstPhoto","photo","createElement","add","src","getUrl","appendChild","textContent","address","formatted_address","website","websitePara","websiteLink","websiteUrl","createTextNode","href","mapProps","createRef","componentDidMount","showMap","coordinates","width","height","render","apiKey"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport {GoogleApiWrapper, Map, Marker} from \"google-maps-react\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport {makeStyles} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport {CardBody} from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\n\n\n\n// const useStyles = makeStyles(() => ({\n//     frame:{\n//         width: \"10\",\n//         height: \"512\"\n//     }\n// }));\n\nconst setMarkers = (values) => {\n    this.markers = values;\n    console.log(this.markers);\n}\n\n\nclass Locations extends Component {\n    constructor(props) {\n        super(props);\n        console.log(11111);\n        this.state = {\n            mapProps: '',\n            map: '',\n            lat: 40.33,\n            lng: -74.57,\n            collapse: true,\n        };\n        this.tRef = React.createRef();\n        this.markers = [];\n        this.results = [];\n        // const classes = useStyles();\n    }\n\n\n    dropdown = () => {\n        this.setState({collapse: !this.state.collapse})\n    }\n\n\n    componentDidMount() {\n        console.log('cm====================');\n        console.log(this.tRef.current);\n        console.log(this.tRef.current.props);\n        console.log(this.tRef.current.map);\n        console.log('cm====================');\n    }\n\n\n\n\n    // fetchPlaces(mapProps, map) {\n    //     console.log('fetchPlaces start print');\n    //     //\n    //     console.log(mapProps);\n    //     console.log(map);\n    //     //\n    //     console.log('fetchPlaces end print');\n    //\n    //     const {google} = mapProps;\n    //\n    //\n    //     const bounds = new google.maps.LatLngBounds();\n    //     const infoWindow = new google.maps.InfoWindow;\n    //     let currentInfoWindow = infoWindow;\n    //     const service = new google.maps.places.PlacesService(map);\n    //     let infoPane = document.getElementById('panel');\n    //\n    // }\n\n\n\n\n\n\n    testProps = (value) => {\n        console.log(222222);\n        console.log('&&&&&&&&&&&');\n        console.log(this.markers);\n        console.log('&&&&&&&&&&&');\n\n\n        // console.log(this.tRef.current);\n        const {google} = this.tRef.current.props;\n\n        let map = this.tRef.current.map;\n\n        const bounds = new google.maps.LatLngBounds();\n        const infoWindow = new google.maps.InfoWindow;\n        let currentInfoWindow = infoWindow;\n        const service = new google.maps.places.PlacesService(map);\n        let infoPane = document.getElementById('panel');\n\n        let request = {\n            location: {\n                lat: 40.33, lng: -74.57\n            },\n            rankBy: this.props.google.maps.places.RankBy.DISTANCE,\n\n            // keyword: isNull ? 'hotel':this.state.keyword\n            // keyword: this.state.keyword\n            keyword: value\n        };\n\n\n\n        service.nearbySearch(request, (results, status) =>{\n            if (status == google.maps.places.PlacesServiceStatus.OK) {\n\n                console.log(status);\n                results.forEach(place => {\n                    let marker = new google.maps.Marker({\n                        position: place.geometry.location,\n                        map: map,\n                        title: place.name\n                    });\n\n                    this.markers.push(marker);\n                    this.results.push(place);\n\n\n\n\n\n\n\n\n\n                    // Adjust the map bounds to include the location of this marker\n                    bounds.extend(place.geometry.location);\n                });\n\n\n                /* Once all the markers have been placed, adjust the bounds of the map to\n                 * show all the markers within the visible area. */\n                map.fitBounds(bounds);\n                console.log('+++++++++++++++');\n                // this.setMarkers(markers);\n                console.log(this.markers);\n                console.log('+++++++++++++++');\n\n            }\n            else {\n                console.log(\"doesn't work\");\n            }\n\n\n\n        });\n\n        this.results.forEach((place, index) => {\n            let marker = this.markers[index];\n            google.maps.event.addListener(marker, 'click', () => {\n            let request = {\n                placeId: place.place_id,\n                fields: ['name', 'formatted_address', 'geometry', 'rating',\n                    'website', 'photos']\n            };\n\n            /* Only fetch the details of a place when the user clicks on a marker.\n             * If we fetch the details for all place results as soon as we get\n             * the search response, we will hit API rate limits. */\n            service.getDetails(request, (placeResult, status) => {\n            if (status == google.maps.places.PlacesServiceStatus.OK) {\n            let placeInfowindow = new google.maps.InfoWindow();\n            let rating = \"None\";\n            if (placeResult.rating) rating = placeResult.rating;\n            placeInfowindow.setContent('<div><strong>' + placeResult.name +\n            '</strong><br>' + 'Rating: ' + rating + '</div>');\n            placeInfowindow.open(marker.map, marker);\n            currentInfoWindow.close();\n            currentInfoWindow = placeInfowindow;\n            console.log(\"reach here\");\n            // showPanel(placeResult);\n\n            if (infoPane.classList.contains(\"open\"))\n            {\n                infoPane.classList.remove(\"open\");\n            }\n\n            // Clear the previous details\n            while (infoPane.lastChild) {\n                infoPane.removeChild(infoPane.lastChild);\n            }\n\n            /* TODO: Step 4E: Display a Place Photo with the Place Details */\n            // Add the primary photo, if there is one\n            if (placeResult.photos) {\n                let firstPhoto = placeResult.photos[0];\n                let photo = document.createElement('img');\n                photo.classList.add('hero');\n                photo.src = firstPhoto.getUrl();\n                infoPane.appendChild(photo);\n            }\n\n            // Add place details with text formatting\n            let name = document.createElement('h1');\n            name.classList.add('place');\n            name.textContent = placeResult.name;\n            infoPane.appendChild(name);\n\n            if (placeResult.rating) {\n                let rating = document.createElement('p');\n                rating.classList.add('details');\n                rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                infoPane.appendChild(rating);\n            }\n\n            let address = document.createElement('p');\n            address.classList.add('details');\n            address.textContent = placeResult.formatted_address;\n            infoPane.appendChild(address);\n            if (placeResult.website) {\n                let websitePara = document.createElement('p');\n                let websiteLink = document.createElement('a');\n                let websiteUrl = document.createTextNode(placeResult.website);\n                websiteLink.appendChild(websiteUrl);\n                websiteLink.title = placeResult.website;\n                websiteLink.href = placeResult.website;\n                websitePara.appendChild(websiteLink);\n                infoPane.appendChild(websitePara);\n            }\n\n            // Open the infoPane\n            infoPane.classList.add(\"open\");\n\n\n            }\n            else {\n                console.log('showDetails failed: ' + status);\n            }\n\n\n            // showDetails(placeResult, marker, status)\n            })\n            })\n\n        });\n\n\n\n    }\n\n\n\n//     //     /* TODO: Step 4B: Add click listeners to the markers */\n//     // Add click listener to each marker\n//     google.maps.event.addListener(marker, 'click', () => {\n//     let request = {\n//         placeId: place.place_id,\n//         fields: ['name', 'formatted_address', 'geometry', 'rating',\n//             'website', 'photos']\n//     };\n//\n//     /* Only fetch the details of a place when the user clicks on a marker.\n//      * If we fetch the details for all place results as soon as we get\n//      * the search response, we will hit API rate limits. */\n//     service.getDetails(request, (placeResult, status) => {\n//     if (status == google.maps.places.PlacesServiceStatus.OK) {\n//     let placeInfowindow = new google.maps.InfoWindow();\n//     let rating = \"None\";\n//     if (placeResult.rating) rating = placeResult.rating;\n//     placeInfowindow.setContent('<div><strong>' + placeResult.name +\n//     '</strong><br>' + 'Rating: ' + rating + '</div>');\n//     placeInfowindow.open(marker.map, marker);\n//     currentInfoWindow.close();\n//     currentInfoWindow = placeInfowindow;\n//     console.log(\"reach here\");\n//     // showPanel(placeResult);\n//\n//     if (infoPane.classList.contains(\"open\"))\n// {\n//     infoPane.classList.remove(\"open\");\n// }\n//\n// // Clear the previous details\n// while (infoPane.lastChild) {\n//     infoPane.removeChild(infoPane.lastChild);\n// }\n\n// /* TODO: Step 4E: Display a Place Photo with the Place Details */\n// // Add the primary photo, if there is one\n// if (placeResult.photos) {\n//     let firstPhoto = placeResult.photos[0];\n//     let photo = document.createElement('img');\n//     photo.classList.add('hero');\n//     photo.src = firstPhoto.getUrl();\n//     infoPane.appendChild(photo);\n// }\n//\n// // Add place details with text formatting\n// let name = document.createElement('h1');\n// name.classList.add('place');\n// name.textContent = placeResult.name;\n// infoPane.appendChild(name);\n// if (placeResult.rating) {\n//     let rating = document.createElement('p');\n//     rating.classList.add('details');\n//     rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n//     infoPane.appendChild(rating);\n// }\n// let address = document.createElement('p');\n// address.classList.add('details');\n// address.textContent = placeResult.formatted_address;\n// infoPane.appendChild(address);\n// if (placeResult.website) {\n//     let websitePara = document.createElement('p');\n//     let websiteLink = document.createElement('a');\n//     let websiteUrl = document.createTextNode(placeResult.website);\n//     websiteLink.appendChild(websiteUrl);\n//     websiteLink.title = placeResult.website;\n//     websiteLink.href = placeResult.website;\n//     websitePara.appendChild(websiteLink);\n//     infoPane.appendChild(websitePara);\n// }\n//\n// // Open the infoPane\n// infoPane.classList.add(\"open\");\n//\n//\n// } else {\n//     console.log('showDetails failed: ' + status);\n// }\n//\n//\n// // showDetails(placeResult, marker, status)\n// });\n// });\n\n\n\n\n\n\n\n    showMap() {\n        const coordinates = [];\n\n\n        return (\n            <div>\n                <Map id = \"map\"\n                     ref = {this.tRef}\n                    style={{width: \"10\", height: \"512\"}}\n                    // style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n                    // onReady={(mapProps, map) => this.setMapProps(mapProps, map)}\n                    google={this.props.google}\n                    // onReady={(mapProps,map) => this.fetchPlaces(mapProps, map)}\n\n                    zoom={16}\n                    initialCenter={{\n                        lat: 40.33, lng: -74.57\n                    }}\n                    visible={true}\n                >\n                    <Marker\n                        name={'Center'}\n                        position={{lat: this.state.lat, lng: this.state.lng}}\n                    />\n                </Map>\n            </div>\n        );\n    }\n\n\n\n\n\n\n    render() {\n        return (\n            <div>\n                <div id=\"panel\"></div>\n                {/*// Important! Always set the container height explicitly*/}\n                <Container>\n                    <button onClick={() => this.testProps('restaurant')}>restaurant</button>\n                    <Button onClick={() => this.testProps('hotel')} size='lg'>hotel</Button>\n                    <Card>\n                        {this.state.collapse === true ? this.showMap(): <span></span> }\n                    </Card>\n                </Container>\n            </div>\n        );\n    }\n}\n\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n})(Locations)\n\n\n{/*<Marker position={{ lat: 40.33, lng: -74.57}} />*/}\n\n{/*<Marker onClick={this.onMarkerClick}*/}\n{/*name={'Current location'} />*/}\n\n{/*<InfoWindow*/}\n{/*marker={this.state.activeMarker}*/}\n{/*visible={this.state.showingInfoWindow}>*/}\n{/*<div>*/}\n{/*<h1>{this.state.selectedPlace.name}</h1>*/}\n{/*</div>*/}\n{/*</InfoWindow>*/}"]},"metadata":{},"sourceType":"module"}