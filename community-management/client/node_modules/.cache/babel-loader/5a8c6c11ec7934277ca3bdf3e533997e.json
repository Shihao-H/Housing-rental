{"ast":null,"code":"var _jsxFileName = \"/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js\";\nimport { Component } from \"react\";\nimport { GoogleApiWrapper, Map } from \"google-maps-react\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport { CardBody } from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\"; // const useStyles = makeStyles(() => ({\n//     frame:{\n//         width: \"10\",\n//         height: \"512\"\n//     }\n// }));\n\nclass Locations extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dropdown = () => {\n      this.setState({\n        collapse: !this.state.collapse\n      });\n    };\n\n    this.setKeyword = event => {\n      // event.preventDefault();\n      console.log('setKeyword: ');\n      this.setState({\n        keyword: 'restaurant'\n      });\n      console.log(this.state.keyword);\n      console.log('kkkkkk');\n    };\n\n    this.testProps = map => {\n      console.log('testProps start print');\n      console.log(this.props.google);\n      const {\n        google\n      } = this.props.google;\n      const bounds = new google.maps.LatLngBounds();\n      const infoWindow = new google.maps.InfoWindow();\n      let currentInfoWindow = infoWindow;\n      const service = new google.maps.places.PlacesService(map);\n      let infoPane = document.getElementById('panel');\n      let request = {\n        location: {\n          lat: 40.33,\n          lng: -74.57\n        },\n        rankBy: google.maps.places.RankBy.DISTANCE,\n        // keyword: isNull ? 'hotel':this.state.keyword\n        // keyword: this.state.keyword\n        keyword: 'hotel'\n      };\n      console.log('&&&&&&&&&&&');\n      console.log(service);\n      console.log('&&&&&&&&&&&');\n      console.log('testProps end print');\n    };\n\n    this.state = {\n      keyword: '',\n      collapse: true\n    }; // const classes = useStyles();\n\n    console.log(11111);\n  }\n\n  fetchPlaces(mapProps, map, value) {\n    // console.log('fetchPlaces start print');\n    //\n    // console.log(mapProps);\n    // console.log(map);\n    //\n    // console.log('fetchPlaces end print');\n    const {\n      google\n    } = mapProps;\n    const bounds = new google.maps.LatLngBounds();\n    const infoWindow = new google.maps.InfoWindow();\n    let currentInfoWindow = infoWindow;\n    const service = new google.maps.places.PlacesService(map);\n    let infoPane = document.getElementById('panel');\n    let isNull = false; // try {\n    //     console.log(this.state.keyword);\n    //     console.log('try')\n    // }\n    // catch(err) {\n    //\n    //     isNull = true;\n    //     console.log('still null');\n    // }\n\n    let request = {\n      location: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      rankBy: google.maps.places.RankBy.DISTANCE,\n      // keyword: isNull ? 'hotel':this.state.keyword\n      // keyword: this.state.keyword\n      keyword: 'hotel'\n    };\n    console.log('...........');\n    console.log(service);\n    console.log('...........'); // service.nearbySearch(request, this.nearbyCallback);\n\n    service.nearbySearch(request, function (results, status) {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        console.log(status);\n        results.forEach(place => {\n          let marker = new google.maps.Marker({\n            position: place.geometry.location,\n            map: map,\n            title: place.name\n          }); //     /* TODO: Step 4B: Add click listeners to the markers */\n          // Add click listener to each marker\n\n          google.maps.event.addListener(marker, 'click', () => {\n            let request = {\n              placeId: place.place_id,\n              fields: ['name', 'formatted_address', 'geometry', 'rating', 'website', 'photos']\n            };\n            /* Only fetch the details of a place when the user clicks on a marker.\n             * If we fetch the details for all place results as soon as we get\n             * the search response, we will hit API rate limits. */\n\n            service.getDetails(request, (placeResult, status) => {\n              if (status == google.maps.places.PlacesServiceStatus.OK) {\n                let placeInfowindow = new google.maps.InfoWindow();\n                let rating = \"None\";\n                if (placeResult.rating) rating = placeResult.rating;\n                placeInfowindow.setContent('<div><strong>' + placeResult.name + '</strong><br>' + 'Rating: ' + rating + '</div>');\n                placeInfowindow.open(marker.map, marker);\n                currentInfoWindow.close();\n                currentInfoWindow = placeInfowindow;\n                console.log(\"reach here\"); // showPanel(placeResult);\n\n                if (infoPane.classList.contains(\"open\")) {\n                  infoPane.classList.remove(\"open\");\n                } // Clear the previous details\n\n\n                while (infoPane.lastChild) {\n                  infoPane.removeChild(infoPane.lastChild);\n                }\n                /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                // Add the primary photo, if there is one\n\n\n                if (placeResult.photos) {\n                  let firstPhoto = placeResult.photos[0];\n                  let photo = document.createElement('img');\n                  photo.classList.add('hero');\n                  photo.src = firstPhoto.getUrl();\n                  infoPane.appendChild(photo);\n                } // Add place details with text formatting\n\n\n                let name = document.createElement('h1');\n                name.classList.add('place');\n                name.textContent = placeResult.name;\n                infoPane.appendChild(name);\n\n                if (placeResult.rating) {\n                  let rating = document.createElement('p');\n                  rating.classList.add('details');\n                  rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                  infoPane.appendChild(rating);\n                }\n\n                let address = document.createElement('p');\n                address.classList.add('details');\n                address.textContent = placeResult.formatted_address;\n                infoPane.appendChild(address);\n\n                if (placeResult.website) {\n                  let websitePara = document.createElement('p');\n                  let websiteLink = document.createElement('a');\n                  let websiteUrl = document.createTextNode(placeResult.website);\n                  websiteLink.appendChild(websiteUrl);\n                  websiteLink.title = placeResult.website;\n                  websiteLink.href = placeResult.website;\n                  websitePara.appendChild(websiteLink);\n                  infoPane.appendChild(websitePara);\n                } // Open the infoPane\n\n\n                infoPane.classList.add(\"open\");\n              } else {\n                console.log('showDetails failed: ' + status);\n              } // showDetails(placeResult, marker, status)\n\n            });\n          }); // Adjust the map bounds to include the location of this marker\n\n          bounds.extend(place.geometry.location);\n        });\n        /* Once all the markers have been placed, adjust the bounds of the map to\n         * show all the markers within the visible area. */\n\n        map.fitBounds(bounds);\n      } else {\n        console.log(\"doesn't work\");\n      }\n    });\n  }\n\n  showMap() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      style: {\n        width: \"10\",\n        height: \"512\"\n      } // style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n      // onReady={this.fetchPlaces(mapProps, map,this.state.keyword)}\n      ,\n      google: this.props.google,\n      onReady: (mapProps, map) => this.fetchPlaces(mapProps, map, this.state.keyword),\n      zoom: 16,\n      initialCenter: {\n        lat: 40.33,\n        lng: -74.57\n      },\n      visible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }\n    }, mapProps));\n  }\n\n  render() {\n    console.log(55555);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.setKeyword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }\n    }, \"restaurant\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.dropdown,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }\n    }, \"Map\"), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }\n    }, this.state.collapse === true ? this.showMap() : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 73\n      }\n    }))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\"\n})(Locations);\n{\n  /*<Marker position={{ lat: 40.33, lng: -74.57}} />*/\n}\n{\n  /*<Marker onClick={this.onMarkerClick}*/\n}\n{\n  /*name={'Current location'} />*/\n}\n{\n  /*<InfoWindow*/\n}\n{\n  /*marker={this.state.activeMarker}*/\n}\n{\n  /*visible={this.state.showingInfoWindow}>*/\n}\n{\n  /*<div>*/\n}\n{\n  /*<h1>{this.state.selectedPlace.name}</h1>*/\n}\n{\n  /*</div>*/\n}\n{\n  /*</InfoWindow>*/\n}","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js"],"names":["Component","GoogleApiWrapper","Map","React","Card","makeStyles","Container","CardBody","Button","Locations","constructor","props","dropdown","setState","collapse","state","setKeyword","event","console","log","keyword","testProps","map","google","bounds","maps","LatLngBounds","infoWindow","InfoWindow","currentInfoWindow","service","places","PlacesService","infoPane","document","getElementById","request","location","lat","lng","rankBy","RankBy","DISTANCE","fetchPlaces","mapProps","value","isNull","nearbySearch","results","status","PlacesServiceStatus","OK","forEach","place","marker","Marker","position","geometry","title","name","addListener","placeId","place_id","fields","getDetails","placeResult","placeInfowindow","rating","setContent","open","close","classList","contains","remove","lastChild","removeChild","photos","firstPhoto","photo","createElement","add","src","getUrl","appendChild","textContent","address","formatted_address","website","websitePara","websiteLink","websiteUrl","createTextNode","href","extend","fitBounds","showMap","width","height","render","apiKey"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\nimport {GoogleApiWrapper, Map} from \"google-maps-react\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport {makeStyles} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport {CardBody} from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\n\n\n// const useStyles = makeStyles(() => ({\n//     frame:{\n//         width: \"10\",\n//         height: \"512\"\n//     }\n// }));\n\n\nclass Locations extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            keyword: '',\n            collapse: true\n        };\n        // const classes = useStyles();\n        console.log(11111);\n    }\n\n    dropdown = () => {\n        this.setState({collapse: !this.state.collapse})\n    }\n\n\n    // componentWillMount() {\n    //     this.setState({\n    //         keyword: 'hotel',\n    //     });\n    //     console.log(22222);\n    // }\n    //\n    // componentDidMount() {\n    //     this.setState({\n    //         keyword: 'hotel',\n    //     });\n    //     console.log(33333);\n    // }\n    //\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.state !== this.state) {\n    //         this.render();\n    //         console.log(44444);\n    //     }\n    //\n    // }\n\n    // state = {\n    //     showingInfoWindow: false,\n    //     activeMarker: {},\n    //     selectedPlace: {},\n    // };\n    //\n    // onMarkerClick = (props, marker, e) =>\n    //     this.setState({\n    //         selectedPlace: props,\n    //         activeMarker: marker,\n    //         showingInfoWindow: true\n    //     });\n    //\n    // onMapClicked = (props) => {\n    //     if (this.state.showingInfoWindow) {\n    //         this.setState({\n    //             showingInfoWindow: false,\n    //             activeMarker: null\n    //         })\n    //     }\n    // };\n    setKeyword = (event) => {\n        // event.preventDefault();\n        console.log('setKeyword: ');\n        this.setState({\n            keyword: 'restaurant'\n        });\n\n        console.log(this.state.keyword);\n        console.log('kkkkkk');\n\n    }\n\n\n    fetchPlaces(mapProps, map, value) {\n        // console.log('fetchPlaces start print');\n        //\n        // console.log(mapProps);\n        // console.log(map);\n        //\n        // console.log('fetchPlaces end print');\n\n        const {google} = mapProps;\n\n\n        const bounds = new google.maps.LatLngBounds();\n        const infoWindow = new google.maps.InfoWindow;\n        let currentInfoWindow = infoWindow;\n        const service = new google.maps.places.PlacesService(map);\n        let infoPane = document.getElementById('panel');\n        let isNull = false;\n\n        // try {\n        //     console.log(this.state.keyword);\n        //     console.log('try')\n        // }\n        // catch(err) {\n        //\n        //     isNull = true;\n        //     console.log('still null');\n        // }\n\n\n        let request = {\n            location: {\n                lat: 40.33, lng: -74.57\n            },\n            rankBy: google.maps.places.RankBy.DISTANCE,\n\n            // keyword: isNull ? 'hotel':this.state.keyword\n            // keyword: this.state.keyword\n            keyword: 'hotel'\n        };\n\n        console.log('...........');\n        console.log(service);\n        console.log('...........');\n        // service.nearbySearch(request, this.nearbyCallback);\n\n\n\n\n\n        service.nearbySearch(request, function(results, status) {\n            if (status === google.maps.places.PlacesServiceStatus.OK) {\n                console.log(status);\n                results.forEach(place => {\n                    let marker = new google.maps.Marker({\n                        position: place.geometry.location,\n                        map: map,\n                        title: place.name\n                    });\n\n\n                    //     /* TODO: Step 4B: Add click listeners to the markers */\n                    // Add click listener to each marker\n                    google.maps.event.addListener(marker, 'click', () => {\n                        let request = {\n                            placeId: place.place_id,\n                            fields: ['name', 'formatted_address', 'geometry', 'rating',\n                                'website', 'photos']\n                        };\n\n                        /* Only fetch the details of a place when the user clicks on a marker.\n                         * If we fetch the details for all place results as soon as we get\n                         * the search response, we will hit API rate limits. */\n                        service.getDetails(request, (placeResult, status) => {\n                            if (status == google.maps.places.PlacesServiceStatus.OK) {\n                                let placeInfowindow = new google.maps.InfoWindow();\n                                let rating = \"None\";\n                                if (placeResult.rating) rating = placeResult.rating;\n                                placeInfowindow.setContent('<div><strong>' + placeResult.name +\n                                    '</strong><br>' + 'Rating: ' + rating + '</div>');\n                                placeInfowindow.open(marker.map, marker);\n                                currentInfoWindow.close();\n                                currentInfoWindow = placeInfowindow;\n                                console.log(\"reach here\");\n                                // showPanel(placeResult);\n\n                                if (infoPane.classList.contains(\"open\"))\n                                {\n                                    infoPane.classList.remove(\"open\");\n                                }\n\n                                // Clear the previous details\n                                while (infoPane.lastChild) {\n                                    infoPane.removeChild(infoPane.lastChild);\n                                }\n\n                                /* TODO: Step 4E: Display a Place Photo with the Place Details */\n                                // Add the primary photo, if there is one\n                                if (placeResult.photos) {\n                                    let firstPhoto = placeResult.photos[0];\n                                    let photo = document.createElement('img');\n                                    photo.classList.add('hero');\n                                    photo.src = firstPhoto.getUrl();\n                                    infoPane.appendChild(photo);\n                                }\n\n                                // Add place details with text formatting\n                                let name = document.createElement('h1');\n                                name.classList.add('place');\n                                name.textContent = placeResult.name;\n                                infoPane.appendChild(name);\n                                if (placeResult.rating) {\n                                    let rating = document.createElement('p');\n                                    rating.classList.add('details');\n                                    rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n                                    infoPane.appendChild(rating);\n                                }\n                                let address = document.createElement('p');\n                                address.classList.add('details');\n                                address.textContent = placeResult.formatted_address;\n                                infoPane.appendChild(address);\n                                if (placeResult.website) {\n                                    let websitePara = document.createElement('p');\n                                    let websiteLink = document.createElement('a');\n                                    let websiteUrl = document.createTextNode(placeResult.website);\n                                    websiteLink.appendChild(websiteUrl);\n                                    websiteLink.title = placeResult.website;\n                                    websiteLink.href = placeResult.website;\n                                    websitePara.appendChild(websiteLink);\n                                    infoPane.appendChild(websitePara);\n                                }\n\n                                // Open the infoPane\n                                infoPane.classList.add(\"open\");\n\n\n\n\n\n\n\n\n                            } else {\n                                console.log('showDetails failed: ' + status);\n                            }\n\n\n\n\n\n\n\n                            // showDetails(placeResult, marker, status)\n                        });\n                    });\n\n                    // Adjust the map bounds to include the location of this marker\n                    bounds.extend(place.geometry.location);\n                });\n                /* Once all the markers have been placed, adjust the bounds of the map to\n                 * show all the markers within the visible area. */\n                map.fitBounds(bounds);\n\n\n            }\n            else {\n                console.log(\"doesn't work\");\n            }\n        });\n\n    }\n\n    testProps = (map) => {\n        console.log('testProps start print');\n\n        console.log(this.props.google);\n\n        const {google} = this.props.google;\n\n        const bounds = new google.maps.LatLngBounds();\n        const infoWindow = new google.maps.InfoWindow;\n        let currentInfoWindow = infoWindow;\n        const service = new google.maps.places.PlacesService(map);\n        let infoPane = document.getElementById('panel');\n\n\n        let request = {\n            location: {\n                lat: 40.33, lng: -74.57\n            },\n            rankBy: google.maps.places.RankBy.DISTANCE,\n\n            // keyword: isNull ? 'hotel':this.state.keyword\n            // keyword: this.state.keyword\n            keyword: 'hotel'\n        };\n\n        console.log('&&&&&&&&&&&');\n        console.log(service);\n        console.log('&&&&&&&&&&&');\n\n\n        console.log('testProps end print');\n    }\n\n\n    showMap() {\n        return (\n            <div>\n                <Map\n                    style={{width: \"10\", height: \"512\"}}\n                    // style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n                    // onReady={this.fetchPlaces(mapProps, map,this.state.keyword)}\n                    google={this.props.google}\n                    onReady={(mapProps,map) => this.fetchPlaces(mapProps, map, this.state.keyword)}\n\n                    zoom={16}\n                    initialCenter={{\n                        lat: 40.33, lng: -74.57\n                    }}\n                    visible={true}\n                >\n                    {mapProps}\n                </Map>\n            </div>\n        );\n    }\n\n\n\n\n\n\n    render() {\n        console.log(55555);\n        return (\n            <div>\n                <div id=\"panel\"></div>\n                {/*// Important! Always set the container height explicitly*/}\n                <Container>\n                    <button onClick={this.setKeyword}>restaurant</button>\n                    <Button onClick={this.dropdown} size='lg'>Map</Button>\n                    <Card>\n                        {this.state.collapse === true ? this.showMap(): <span></span> }\n                    </Card>\n                </Container>\n            </div>\n        );\n    }\n}\n\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n})(Locations)\n\n\n{/*<Marker position={{ lat: 40.33, lng: -74.57}} />*/}\n\n{/*<Marker onClick={this.onMarkerClick}*/}\n{/*name={'Current location'} />*/}\n\n{/*<InfoWindow*/}\n{/*marker={this.state.activeMarker}*/}\n{/*visible={this.state.showingInfoWindow}>*/}\n{/*<div>*/}\n{/*<h1>{this.state.selectedPlace.name}</h1>*/}\n{/*</div>*/}\n{/*</InfoWindow>*/}"]},"metadata":{},"sourceType":"module"}