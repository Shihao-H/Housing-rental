{"ast":null,"code":"var _jsxFileName = \"/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js\";\nimport React, { Component } from 'react';\nimport { Card, CardBody } from 'reactstrap';\nimport { GoogleApiWrapper, InfoWindow, Map, Marker } from \"google-maps-react\"; // import { compose, withState, withProps, withStateHandlers, lifecycle } from 'recompose';\n// import { withScriptjs, withGoogleMap, GoogleMap, InfoWindow} from 'react-google-maps';\n\nlet pos;\nlet map;\nlet bounds;\nlet infoWindow;\nlet currentInfoWindow;\nlet service;\nlet infoPane; // Handle the results (up to 20) of the Nearby Search\n\nfunction nearbyCallback(results, status) {\n  if (status == this.props.google.maps.places.PlacesServiceStatus.OK) {\n    createMarkers(results);\n  }\n}\n\nfunction initMap() {\n  // Initialize variables\n  bounds = new window.google.maps.LatLngBounds();\n  infoWindow = new window.google.maps.InfoWindow();\n  currentInfoWindow = infoWindow;\n  /* TODO: Step 4A3: Add a generic sidebar */\n\n  infoPane = document.getElementById('panel'); // Try HTML5 geolocation\n\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(position => {\n      pos = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n      map = new window.google.maps.Map(document.getElementById('map'), {\n        center: pos,\n        zoom: 15\n      });\n      bounds.extend(pos);\n      infoWindow.setPosition(pos);\n      infoWindow.setContent('Location found.');\n      infoWindow.open(map);\n      map.setCenter(pos); // Call Places Nearby Search on user's location\n\n      getNearbyPlaces(pos);\n    }, () => {\n      // Browser supports geolocation, but user has denied permission\n      handleLocationError(true, infoWindow);\n    });\n  } else {\n    // Browser doesn't support geolocation\n    handleLocationError(false, infoWindow);\n  }\n} // Handle a geolocation error\n\n\nfunction handleLocationError(browserHasGeolocation, infoWindow) {\n  // Set default location to Sydney, Australia\n  pos = {\n    lat: -33.856,\n    lng: 151.215\n  };\n  map = new window.google.maps.Map(document.getElementById('map'), {\n    center: pos,\n    zoom: 15\n  }); // Display an InfoWindow at the map center\n\n  infoWindow.setPosition(pos);\n  infoWindow.setContent(browserHasGeolocation ? 'Geolocation permissions denied. Using default location.' : 'Error: Your browser doesn\\'t support geolocation.');\n  infoWindow.open(map);\n  currentInfoWindow = infoWindow; // Call Places Nearby Search on the default location\n\n  getNearbyPlaces(pos);\n} // Set markers at the location of each place result\n\n\nfunction createMarkers(places) {\n  console.log('Create markers');\n  places.forEach(place => {\n    let marker = new window.google.maps.Marker({\n      position: place.geometry.location,\n      map: map,\n      title: place.name\n    });\n    /* TODO: Step 4B: Add click listeners to the markers */\n    // Add click listener to each marker\n\n    window.google.maps.event.addListener(marker, 'click', () => {\n      let request = {\n        placeId: place.place_id,\n        fields: ['name', 'formatted_address', 'geometry', 'rating', 'website', 'photos']\n      };\n      /* Only fetch the details of a place when the user clicks on a marker.\n       * If we fetch the details for all place results as soon as we get\n       * the search response, we will hit API rate limits. */\n\n      service.getDetails(request, (placeResult, status) => {\n        showDetails(placeResult, marker, status);\n      });\n    }); // Adjust the map bounds to include the location of this marker\n\n    bounds.extend(place.geometry.location);\n  });\n  /* Once all the markers have been placed, adjust the bounds of the map to\n   * show all the markers within the visible area. */\n\n  map.fitBounds(bounds);\n} // Perform a Places Nearby Search Request\n\n\nfunction getNearbyPlaces(position) {\n  let request = {\n    location: position,\n    rankBy: window.google.maps.places.RankBy.DISTANCE,\n    // keyword: 'sushi'\n    keyword: 'hotel'\n  };\n  service = new window.google.maps.places.PlacesService(map);\n  service.nearbySearch(request, nearbyCallback);\n  console.log('Entered here');\n}\n/* TODO: Step 4C: Show place details in an info window */\n// Builds an InfoWindow to display details above the marker\n\n\nfunction showDetails(placeResult, marker, status) {\n  if (status == window.google.maps.places.PlacesServiceStatus.OK) {\n    let placeInfowindow = new window.google.maps.InfoWindow();\n    let rating = \"None\";\n    if (placeResult.rating) rating = placeResult.rating;\n    placeInfowindow.setContent('<div><strong>' + placeResult.name + '</strong><br>' + 'Rating: ' + rating + '</div>');\n    placeInfowindow.open(marker.map, marker);\n    currentInfoWindow.close();\n    currentInfoWindow = placeInfowindow;\n    showPanel(placeResult);\n  } else {\n    console.log('showDetails failed: ' + status);\n  }\n}\n/* TODO: Step 4D: Load place details in a sidebar */\n// Displays place details in a sidebar\n\n\nfunction showPanel(placeResult) {\n  // If infoPane is already open, close it\n  if (infoPane.classList.contains(\"open\")) {\n    infoPane.classList.remove(\"open\");\n  } // Clear the previous details\n\n\n  while (infoPane.lastChild) {\n    infoPane.removeChild(infoPane.lastChild);\n  }\n  /* TODO: Step 4E: Display a Place Photo with the Place Details */\n  // Add the primary photo, if there is one\n\n\n  if (placeResult.photos) {\n    let firstPhoto = placeResult.photos[0];\n    let photo = document.createElement('img');\n    photo.classList.add('hero');\n    photo.src = firstPhoto.getUrl();\n    infoPane.appendChild(photo);\n  } // Add place details with text formatting\n\n\n  let name = document.createElement('h1');\n  name.classList.add('place');\n  name.textContent = placeResult.name;\n  infoPane.appendChild(name);\n\n  if (placeResult.rating) {\n    let rating = document.createElement('p');\n    rating.classList.add('details');\n    rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n    infoPane.appendChild(rating);\n  }\n\n  let address = document.createElement('p');\n  address.classList.add('details');\n  address.textContent = placeResult.formatted_address;\n  infoPane.appendChild(address);\n\n  if (placeResult.website) {\n    let websitePara = document.createElement('p');\n    let websiteLink = document.createElement('a');\n    let websiteUrl = document.createTextNode(placeResult.website);\n    websiteLink.appendChild(websiteUrl);\n    websiteLink.title = placeResult.website;\n    websiteLink.href = placeResult.website;\n    websitePara.appendChild(websiteLink);\n    infoPane.appendChild(websitePara);\n  } // Open the infoPane\n\n\n  infoPane.classList.add(\"open\");\n}\n\nclass Locations extends Component {\n  render() {\n    return (\n      /*#__PURE__*/\n      // Important! Always set the container height explicitly\n      React.createElement(\"div\", {\n        className: 'text-center',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: \"10\",\n          height: \"512\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Map, {\n        style: {\n          width: \"95%\",\n          height: \"515\",\n          display: 'flex',\n          flexFlow: 'row nowrap'\n        },\n        google: this.props.google,\n        zoom: 16,\n        initialCenter: {\n          lat: 40.33,\n          lng: -74.57\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Marker, {\n        position: {\n          lat: 40.33,\n          lng: -74.57\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 33\n        }\n      }, getNearbyPlaces({\n        lat: 40.33,\n        lng: -74.57\n      }))))\n    );\n  }\n\n} // export default Locations;\n\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\"\n})(Locations);\n{\n  /*<GoogleMapReact*/\n}\n{\n  /*bootstrapURLKeys={{ key: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\" }}*/\n}\n{\n  /*defaultCenter={this.props.center}*/\n}\n{\n  /*defaultZoom={this.props.zoom}*/\n}\n{\n  /*>*/\n}\n{\n  /*</GoogleMapReact>*/\n}","map":{"version":3,"sources":["/Users/shihaohuang/Documents/Mercury/community-management/client/src/navbar/Locations.js"],"names":["React","Component","Card","CardBody","GoogleApiWrapper","InfoWindow","Map","Marker","pos","map","bounds","infoWindow","currentInfoWindow","service","infoPane","nearbyCallback","results","status","props","google","maps","places","PlacesServiceStatus","OK","createMarkers","initMap","window","LatLngBounds","document","getElementById","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","center","zoom","extend","setPosition","setContent","open","setCenter","getNearbyPlaces","handleLocationError","browserHasGeolocation","console","log","forEach","place","marker","geometry","location","title","name","event","addListener","request","placeId","place_id","fields","getDetails","placeResult","showDetails","fitBounds","rankBy","RankBy","DISTANCE","keyword","PlacesService","nearbySearch","placeInfowindow","rating","close","showPanel","classList","contains","remove","lastChild","removeChild","photos","firstPhoto","photo","createElement","add","src","getUrl","appendChild","textContent","address","formatted_address","website","websitePara","websiteLink","websiteUrl","createTextNode","href","Locations","render","width","height","display","flexFlow","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Card, CardBody} from 'reactstrap';\nimport {GoogleApiWrapper, InfoWindow, Map, Marker} from \"google-maps-react\";\n// import { compose, withState, withProps, withStateHandlers, lifecycle } from 'recompose';\n// import { withScriptjs, withGoogleMap, GoogleMap, InfoWindow} from 'react-google-maps';\n\nlet pos;\nlet map;\nlet bounds;\nlet infoWindow;\nlet currentInfoWindow;\nlet service;\nlet infoPane;\n\n\n\n// Handle the results (up to 20) of the Nearby Search\n function nearbyCallback(results, status) {\n     if (status == this.props.google.maps.places.PlacesServiceStatus.OK) {\n        createMarkers(results);\n    }\n}\n\nfunction initMap() {\n    // Initialize variables\n    bounds = new window.google.maps.LatLngBounds();\n    infoWindow = new window.google.maps.InfoWindow;\n    currentInfoWindow = infoWindow;\n    /* TODO: Step 4A3: Add a generic sidebar */\n    infoPane = document.getElementById('panel');\n\n    // Try HTML5 geolocation\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n            pos = {\n                lat: position.coords.latitude,\n                lng: position.coords.longitude\n            };\n            map = new window.google.maps.Map(document.getElementById('map'), {\n                center: pos,\n                zoom: 15\n            });\n            bounds.extend(pos);\n\n            infoWindow.setPosition(pos);\n            infoWindow.setContent('Location found.');\n            infoWindow.open(map);\n            map.setCenter(pos);\n\n            // Call Places Nearby Search on user's location\n            getNearbyPlaces(pos);\n        }, () => {\n            // Browser supports geolocation, but user has denied permission\n            handleLocationError(true, infoWindow);\n        });\n    } else {\n        // Browser doesn't support geolocation\n        handleLocationError(false, infoWindow);\n    }\n}\n\n// Handle a geolocation error\nfunction handleLocationError(browserHasGeolocation, infoWindow) {\n    // Set default location to Sydney, Australia\n    pos = { lat: -33.856, lng: 151.215 };\n    map = new window.google.maps.Map(document.getElementById('map'), {\n        center: pos,\n        zoom: 15\n    });\n\n    // Display an InfoWindow at the map center\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(browserHasGeolocation ?\n        'Geolocation permissions denied. Using default location.' :\n        'Error: Your browser doesn\\'t support geolocation.');\n    infoWindow.open(map);\n    currentInfoWindow = infoWindow;\n\n    // Call Places Nearby Search on the default location\n    getNearbyPlaces(pos);\n}\n\n\n\n\n// Set markers at the location of each place result\n function createMarkers(places) {\n\n     console.log('Create markers');\n    places.forEach(place => {\n        let marker = new window.google.maps.Marker({\n            position: place.geometry.location,\n            map: map,\n            title: place.name\n        });\n\n        /* TODO: Step 4B: Add click listeners to the markers */\n        // Add click listener to each marker\n        window.google.maps.event.addListener(marker, 'click', () => {\n            let request = {\n                placeId: place.place_id,\n                fields: ['name', 'formatted_address', 'geometry', 'rating',\n                    'website', 'photos']\n            };\n\n            /* Only fetch the details of a place when the user clicks on a marker.\n             * If we fetch the details for all place results as soon as we get\n             * the search response, we will hit API rate limits. */\n            service.getDetails(request, (placeResult, status) => {\n                showDetails(placeResult, marker, status)\n            });\n        });\n\n        // Adjust the map bounds to include the location of this marker\n        bounds.extend(place.geometry.location);\n    });\n    /* Once all the markers have been placed, adjust the bounds of the map to\n     * show all the markers within the visible area. */\n    map.fitBounds(bounds);\n}\n\n\n// Perform a Places Nearby Search Request\nfunction getNearbyPlaces(position) {\n    let request = {\n        location: position,\n        rankBy: window.google.maps.places.RankBy.DISTANCE,\n        // keyword: 'sushi'\n\n        keyword: 'hotel'\n    };\n\n    service = new window.google.maps.places.PlacesService(map);\n    service.nearbySearch(request, nearbyCallback);\n\n\n    console.log('Entered here');\n}\n\n\n/* TODO: Step 4C: Show place details in an info window */\n// Builds an InfoWindow to display details above the marker\nfunction showDetails(placeResult, marker, status) {\n    if (status == window.google.maps.places.PlacesServiceStatus.OK) {\n        let placeInfowindow = new window.google.maps.InfoWindow();\n        let rating = \"None\";\n        if (placeResult.rating) rating = placeResult.rating;\n        placeInfowindow.setContent('<div><strong>' + placeResult.name +\n            '</strong><br>' + 'Rating: ' + rating + '</div>');\n        placeInfowindow.open(marker.map, marker);\n        currentInfoWindow.close();\n        currentInfoWindow = placeInfowindow;\n        showPanel(placeResult);\n    } else {\n        console.log('showDetails failed: ' + status);\n    }\n}\n\n\n\n/* TODO: Step 4D: Load place details in a sidebar */\n// Displays place details in a sidebar\nfunction showPanel(placeResult) {\n    // If infoPane is already open, close it\n    if (infoPane.classList.contains(\"open\")) {\n        infoPane.classList.remove(\"open\");\n    }\n\n    // Clear the previous details\n    while (infoPane.lastChild) {\n        infoPane.removeChild(infoPane.lastChild);\n    }\n\n    /* TODO: Step 4E: Display a Place Photo with the Place Details */\n    // Add the primary photo, if there is one\n    if (placeResult.photos) {\n        let firstPhoto = placeResult.photos[0];\n        let photo = document.createElement('img');\n        photo.classList.add('hero');\n        photo.src = firstPhoto.getUrl();\n        infoPane.appendChild(photo);\n    }\n\n    // Add place details with text formatting\n    let name = document.createElement('h1');\n    name.classList.add('place');\n    name.textContent = placeResult.name;\n    infoPane.appendChild(name);\n    if (placeResult.rating) {\n        let rating = document.createElement('p');\n        rating.classList.add('details');\n        rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n        infoPane.appendChild(rating);\n    }\n    let address = document.createElement('p');\n    address.classList.add('details');\n    address.textContent = placeResult.formatted_address;\n    infoPane.appendChild(address);\n    if (placeResult.website) {\n        let websitePara = document.createElement('p');\n        let websiteLink = document.createElement('a');\n        let websiteUrl = document.createTextNode(placeResult.website);\n        websiteLink.appendChild(websiteUrl);\n        websiteLink.title = placeResult.website;\n        websiteLink.href = placeResult.website;\n        websitePara.appendChild(websiteLink);\n        infoPane.appendChild(websitePara);\n    }\n\n    // Open the infoPane\n    infoPane.classList.add(\"open\");\n}\n\n\nclass Locations extends Component {\n\n\n    render() {\n        return (\n\n\n\n\n            // Important! Always set the container height explicitly\n                <div className={'text-center'}>\n                            <div style={{width: \"10\", height: \"512\"}}>\n                                <Map\n                                    style={{width: \"95%\", height: \"515\", display:'flex', flexFlow: 'row nowrap'}}\n                                    google={this.props.google} zoom={16}\n                                    initialCenter={{\n                                        lat: 40.33, lng: -74.57\n                                    }}\n                                    >\n                                    <Marker position={{ lat: 40.33, lng: -74.57}} />\n                                </Map>\n                                <p>\n                                    {getNearbyPlaces({lat: 40.33, lng: -74.57})}\n                                </p>\n\n\n                            </div>\n                </div>\n        );\n    }\n}\n\n// export default Locations;\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\")\n})(Locations)\n\n{/*<GoogleMapReact*/}\n{/*bootstrapURLKeys={{ key: \"AIzaSyCD_NjwMKIxeMBW5-KhgH2cntfYZdTc2A0\" }}*/}\n{/*defaultCenter={this.props.center}*/}\n{/*defaultZoom={this.props.zoom}*/}\n{/*>*/}\n{/*</GoogleMapReact>*/}"]},"metadata":{},"sourceType":"module"}